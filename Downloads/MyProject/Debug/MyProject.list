
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007604  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080077b0  080077b0  000177b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800783c  0800783c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007844  08007844  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007848  08007848  00017848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800784c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c74  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d70  20001d70  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001210a  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ce0  00000000  00000000  00032236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  00034f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c58  00000000  00000000  00035c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258b2  00000000  00000000  000368e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a65  00000000  00000000  0005c192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5642  00000000  00000000  0006dbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143239  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003670  00000000  00000000  0014328c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000fc 	.word	0x200000fc
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007798 	.word	0x08007798

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000100 	.word	0x20000100
 80001e8:	08007798 	.word	0x08007798

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]

	SystemState = SystemState + 1; // incrementing SystemState by one
 80004fa:	4b27      	ldr	r3, [pc, #156]	; (8000598 <HAL_GPIO_EXTI_Callback+0xa8>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	3301      	adds	r3, #1
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b25      	ldr	r3, [pc, #148]	; (8000598 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000504:	701a      	strb	r2, [r3, #0]
	ButtonPressCount = ButtonPressCount + 1;
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <HAL_GPIO_EXTI_Callback+0xac>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	3301      	adds	r3, #1
 800050c:	b2da      	uxtb	r2, r3
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <HAL_GPIO_EXTI_Callback+0xac>)
 8000510:	701a      	strb	r2, [r3, #0]

	if (SystemState > 3){
 8000512:	4b21      	ldr	r3, [pc, #132]	; (8000598 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b03      	cmp	r3, #3
 8000518:	d902      	bls.n	8000520 <HAL_GPIO_EXTI_Callback+0x30>
		SystemState = 0;
 800051a:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <HAL_GPIO_EXTI_Callback+0xa8>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
	}

	//char message[150];
	if (SystemState == 0){
 8000520:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d10a      	bne.n	800053e <HAL_GPIO_EXTI_Callback+0x4e>
		LedState1 = 0;
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <HAL_GPIO_EXTI_Callback+0xb0>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
		LedState2 = 0;
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
		//uint16_t msg = sprintf(message,"%s,%c,%s,%s,%c,%s", init_string, (char)SystemState, off_state, off_state, (char)ButtonPressCount, end_string);
		//HAL_UART_Transmit(&huart1,(uint8_t*)msg, sizeof(msg),1000);
		//CDC_Transmit_FS((uint8_t*)msg, sizeof(msg));
		CDC_Transmit_FS((uint8_t*) "$$Off,Off**", sizeof("$$Off,Off**"));
 8000534:	210c      	movs	r1, #12
 8000536:	481c      	ldr	r0, [pc, #112]	; (80005a8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000538:	f006 fca6 	bl	8006e88 <CDC_Transmit_FS>
		//sprintf(message,"$$%d, %s, %s, %d**", SystemState, on_state, on_state, ButtonPressCount);
		}

	//char *str = tostring(message);
	//CDC_Transmit_FS((uint8_t*) str, sizeof(str));
}
 800053c:	e027      	b.n	800058e <HAL_GPIO_EXTI_Callback+0x9e>
	else if (SystemState == 1){
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d10a      	bne.n	800055c <HAL_GPIO_EXTI_Callback+0x6c>
		LedState1 = 0;
 8000546:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
		LedState2 = 1;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <HAL_GPIO_EXTI_Callback+0xb4>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((uint8_t*) "$$Off,On**", sizeof("$$Off,On**"));
 8000552:	210b      	movs	r1, #11
 8000554:	4815      	ldr	r0, [pc, #84]	; (80005ac <HAL_GPIO_EXTI_Callback+0xbc>)
 8000556:	f006 fc97 	bl	8006e88 <CDC_Transmit_FS>
}
 800055a:	e018      	b.n	800058e <HAL_GPIO_EXTI_Callback+0x9e>
	else if (SystemState == 2){
 800055c:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <HAL_GPIO_EXTI_Callback+0xa8>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d10a      	bne.n	800057a <HAL_GPIO_EXTI_Callback+0x8a>
		LedState1 = 1;
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000566:	2201      	movs	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
		LedState2 = 0;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <HAL_GPIO_EXTI_Callback+0xb4>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((uint8_t*) "$$On,Off**", sizeof("$$On,Off**"));
 8000570:	210b      	movs	r1, #11
 8000572:	480f      	ldr	r0, [pc, #60]	; (80005b0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000574:	f006 fc88 	bl	8006e88 <CDC_Transmit_FS>
}
 8000578:	e009      	b.n	800058e <HAL_GPIO_EXTI_Callback+0x9e>
		LedState1 = 1;
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_GPIO_EXTI_Callback+0xb0>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
		LedState2 = 1;
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((uint8_t*) "$$On,On**", sizeof("$$On,On**"));
 8000586:	210a      	movs	r1, #10
 8000588:	480a      	ldr	r0, [pc, #40]	; (80005b4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800058a:	f006 fc7d 	bl	8006e88 <CDC_Transmit_FS>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000015c 	.word	0x2000015c
 800059c:	2000015d 	.word	0x2000015d
 80005a0:	2000015e 	.word	0x2000015e
 80005a4:	2000015f 	.word	0x2000015f
 80005a8:	080077b0 	.word	0x080077b0
 80005ac:	080077bc 	.word	0x080077bc
 80005b0:	080077c8 	.word	0x080077c8
 80005b4:	080077d4 	.word	0x080077d4

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fa32 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f836 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f8c8 	bl	8000758 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005c8:	f006 fba0 	bl	8006d0c <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80005cc:	f000 f89a 	bl	8000704 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (LedState1 == 0){
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <main+0x6c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d106      	bne.n	80005e6 <main+0x2e>
		  HAL_GPIO_WritePin(GPIOB, LD3_Red_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005de:	4812      	ldr	r0, [pc, #72]	; (8000628 <main+0x70>)
 80005e0:	f000 fd74 	bl	80010cc <HAL_GPIO_WritePin>
 80005e4:	e009      	b.n	80005fa <main+0x42>
	  }
	  else if (LedState1 == 1){
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <main+0x6c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d105      	bne.n	80005fa <main+0x42>
		  HAL_GPIO_WritePin(GPIOB, LD3_Red_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f4:	480c      	ldr	r0, [pc, #48]	; (8000628 <main+0x70>)
 80005f6:	f000 fd69 	bl	80010cc <HAL_GPIO_WritePin>
	  }
	  if (LedState2 == 0){
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <main+0x74>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d105      	bne.n	800060e <main+0x56>
		  HAL_GPIO_WritePin(GPIOB, LD1_green_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2101      	movs	r1, #1
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <main+0x70>)
 8000608:	f000 fd60 	bl	80010cc <HAL_GPIO_WritePin>
 800060c:	e7e0      	b.n	80005d0 <main+0x18>
	  }
	  else if (LedState2 == 1){
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <main+0x74>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d1dc      	bne.n	80005d0 <main+0x18>
		  HAL_GPIO_WritePin(GPIOB, LD1_green_Pin, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2101      	movs	r1, #1
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <main+0x70>)
 800061c:	f000 fd56 	bl	80010cc <HAL_GPIO_WritePin>
	  if (LedState1 == 0){
 8000620:	e7d6      	b.n	80005d0 <main+0x18>
 8000622:	bf00      	nop
 8000624:	2000015e 	.word	0x2000015e
 8000628:	40020400 	.word	0x40020400
 800062c:	2000015f 	.word	0x2000015f

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f007 f8a2 	bl	8007788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	; (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a4:	23a8      	movs	r3, #168	; 0xa8
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 ffb9 	bl	800262c <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 f8c2 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fa1a 	bl	8002b1c <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 f8ab 	bl	8000848 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART1_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800073c:	f002 fc0e 	bl	8002f5c <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f87f 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000118 	.word	0x20000118
 8000754:	40011000 	.word	0x40011000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b32      	ldr	r3, [pc, #200]	; (800083c <MX_GPIO_Init+0xe4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a31      	ldr	r2, [pc, #196]	; (800083c <MX_GPIO_Init+0xe4>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <MX_GPIO_Init+0xe4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b2b      	ldr	r3, [pc, #172]	; (800083c <MX_GPIO_Init+0xe4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a2a      	ldr	r2, [pc, #168]	; (800083c <MX_GPIO_Init+0xe4>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <MX_GPIO_Init+0xe4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_GPIO_Init+0xe4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a23      	ldr	r2, [pc, #140]	; (800083c <MX_GPIO_Init+0xe4>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_GPIO_Init+0xe4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_GPIO_Init+0xe4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_GPIO_Init+0xe4>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_GPIO_Init+0xe4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_green_Pin|LD3_Red_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f244 0101 	movw	r1, #16385	; 0x4001
 80007e4:	4816      	ldr	r0, [pc, #88]	; (8000840 <MX_GPIO_Init+0xe8>)
 80007e6:	f000 fc71 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4810      	ldr	r0, [pc, #64]	; (8000844 <MX_GPIO_Init+0xec>)
 8000802:	f000 fab7 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_green_Pin LD3_Red_Pin */
  GPIO_InitStruct.Pin = LD1_green_Pin|LD3_Red_Pin;
 8000806:	f244 0301 	movw	r3, #16385	; 0x4001
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4808      	ldr	r0, [pc, #32]	; (8000840 <MX_GPIO_Init+0xe8>)
 8000820:	f000 faa8 	bl	8000d74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2028      	movs	r0, #40	; 0x28
 800082a:	f000 fa6c 	bl	8000d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800082e:	2028      	movs	r0, #40	; 0x28
 8000830:	f000 fa85 	bl	8000d3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020400 	.word	0x40020400
 8000844:	40020800 	.word	0x40020800

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <HAL_MspInit+0x4c>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_MspInit+0x4c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a19      	ldr	r2, [pc, #100]	; (8000928 <HAL_UART_MspInit+0x84>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d12c      	bne.n	8000920 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <HAL_UART_MspInit+0x88>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <HAL_UART_MspInit+0x88>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_UART_MspInit+0x88>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_UART_MspInit+0x88>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <HAL_UART_MspInit+0x88>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_UART_MspInit+0x88>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000910:	2307      	movs	r3, #7
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <HAL_UART_MspInit+0x8c>)
 800091c:	f000 fa2a 	bl	8000d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	; 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40011000 	.word	0x40011000
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f8a2 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800098c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000990:	f000 fbb6 	bl	8001100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <OTG_FS_IRQHandler+0x10>)
 800099e:	f000 fd17 	bl	80013d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20001644 	.word	0x20001644

080009ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a08 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009d6:	490e      	ldr	r1, [pc, #56]	; (8000a10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009ec:	4c0b      	ldr	r4, [pc, #44]	; (8000a1c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009fa:	f7ff ffd7 	bl	80009ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fe:	f006 fe9f 	bl	8007740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a02:	f7ff fdd9 	bl	80005b8 <main>
  bx  lr    
 8000a06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a08:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a14:	0800784c 	.word	0x0800784c
  ldr r2, =_sbss
 8000a18:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a1c:	20001d70 	.word	0x20001d70

08000a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <HAL_Init+0x40>)
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_Init+0x40>)
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x40>)
 8000a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f94f 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	200f      	movs	r0, #15
 8000a54:	f000 f808 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff fefc 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x54>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f967 	bl	8000d5a <HAL_SYSTICK_Config>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00e      	b.n	8000ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d80a      	bhi.n	8000ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 f92f 	bl	8000d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000160 	.word	0x20000160

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000160 	.word	0x20000160

08000b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b10:	f7ff ffee 	bl	8000af0 <HAL_GetTick>
 8000b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b20:	d005      	beq.n	8000b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_Delay+0x44>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b2e:	bf00      	nop
 8000b30:	f7ff ffde 	bl	8000af0 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8f7      	bhi.n	8000b30 <HAL_Delay+0x28>
  {
  }
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	db0b      	blt.n	8000bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f003 021f 	and.w	r2, r3, #31
 8000bcc:	4907      	ldr	r1, [pc, #28]	; (8000bec <__NVIC_EnableIRQ+0x38>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e100 	.word	0xe000e100

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cbc:	d301      	bcc.n	8000cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00f      	b.n	8000ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <SysTick_Config+0x40>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cca:	210f      	movs	r1, #15
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f7ff ff8e 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SysTick_Config+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SysTick_Config+0x40>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff29 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff3e 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff8e 	bl	8000c44 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5d 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff31 	bl	8000bb4 <__NVIC_EnableIRQ>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ffa2 	bl	8000cac <SysTick_Config>
 8000d68:	4603      	mov	r3, r0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	e177      	b.n	8001080 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 8166 	bne.w	800107a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d005      	beq.n	8000dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d130      	bne.n	8000e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	f003 0201 	and.w	r2, r3, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d017      	beq.n	8000e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d123      	bne.n	8000eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0203 	and.w	r2, r3, #3
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80c0 	beq.w	800107a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b66      	ldr	r3, [pc, #408]	; (8001098 <HAL_GPIO_Init+0x324>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a65      	ldr	r2, [pc, #404]	; (8001098 <HAL_GPIO_Init+0x324>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b63      	ldr	r3, [pc, #396]	; (8001098 <HAL_GPIO_Init+0x324>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	4a61      	ldr	r2, [pc, #388]	; (800109c <HAL_GPIO_Init+0x328>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a58      	ldr	r2, [pc, #352]	; (80010a0 <HAL_GPIO_Init+0x32c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d037      	beq.n	8000fb2 <HAL_GPIO_Init+0x23e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a57      	ldr	r2, [pc, #348]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d031      	beq.n	8000fae <HAL_GPIO_Init+0x23a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a56      	ldr	r2, [pc, #344]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d02b      	beq.n	8000faa <HAL_GPIO_Init+0x236>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a55      	ldr	r2, [pc, #340]	; (80010ac <HAL_GPIO_Init+0x338>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d025      	beq.n	8000fa6 <HAL_GPIO_Init+0x232>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a54      	ldr	r2, [pc, #336]	; (80010b0 <HAL_GPIO_Init+0x33c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01f      	beq.n	8000fa2 <HAL_GPIO_Init+0x22e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a53      	ldr	r2, [pc, #332]	; (80010b4 <HAL_GPIO_Init+0x340>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x22a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a52      	ldr	r2, [pc, #328]	; (80010b8 <HAL_GPIO_Init+0x344>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x226>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a51      	ldr	r2, [pc, #324]	; (80010bc <HAL_GPIO_Init+0x348>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x222>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a50      	ldr	r2, [pc, #320]	; (80010c0 <HAL_GPIO_Init+0x34c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x21e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4f      	ldr	r2, [pc, #316]	; (80010c4 <HAL_GPIO_Init+0x350>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x21a>
 8000f8a:	2309      	movs	r3, #9
 8000f8c:	e012      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f8e:	230a      	movs	r3, #10
 8000f90:	e010      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f92:	2308      	movs	r3, #8
 8000f94:	e00e      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e00c      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	e00a      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	e008      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	f002 0203 	and.w	r2, r2, #3
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	4935      	ldr	r1, [pc, #212]	; (800109c <HAL_GPIO_Init+0x328>)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	; (80010c8 <HAL_GPIO_Init+0x354>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff6:	4a34      	ldr	r2, [pc, #208]	; (80010c8 <HAL_GPIO_Init+0x354>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <HAL_GPIO_Init+0x354>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001020:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <HAL_GPIO_Init+0x354>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <HAL_GPIO_Init+0x354>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104a:	4a1f      	ldr	r2, [pc, #124]	; (80010c8 <HAL_GPIO_Init+0x354>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <HAL_GPIO_Init+0x354>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <HAL_GPIO_Init+0x354>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	f67f ae84 	bls.w	8000d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40013800 	.word	0x40013800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40021400 	.word	0x40021400
 80010b8:	40021800 	.word	0x40021800
 80010bc:	40021c00 	.word	0x40021c00
 80010c0:	40022000 	.word	0x40022000
 80010c4:	40022400 	.word	0x40022400
 80010c8:	40013c00 	.word	0x40013c00

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	041a      	lsls	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	619a      	str	r2, [r3, #24]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800110c:	695a      	ldr	r2, [r3, #20]
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f9e6 	bl	80004f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40013c00 	.word	0x40013c00

08001130 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001132:	b08f      	sub	sp, #60	; 0x3c
 8001134:	af0a      	add	r7, sp, #40	; 0x28
 8001136:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e10f      	b.n	8001362 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d106      	bne.n	8001162 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f005 ffdb 	bl	8007118 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2203      	movs	r2, #3
 8001166:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001172:	2b00      	cmp	r3, #0
 8001174:	d102      	bne.n	800117c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f002 fac2 	bl	800370a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	687e      	ldr	r6, [r7, #4]
 800118e:	466d      	mov	r5, sp
 8001190:	f106 0410 	add.w	r4, r6, #16
 8001194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80011a4:	1d33      	adds	r3, r6, #4
 80011a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a8:	6838      	ldr	r0, [r7, #0]
 80011aa:	f002 f999 	bl	80034e0 <USB_CoreInit>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2202      	movs	r2, #2
 80011b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0d0      	b.n	8001362 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 fab0 	bl	800372c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e04a      	b.n	8001268 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	333d      	adds	r3, #61	; 0x3d
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	333c      	adds	r3, #60	; 0x3c
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	b298      	uxth	r0, r3
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	3344      	adds	r3, #68	; 0x44
 800120e:	4602      	mov	r2, r0
 8001210:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	3340      	adds	r3, #64	; 0x40
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	3348      	adds	r3, #72	; 0x48
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	334c      	adds	r3, #76	; 0x4c
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	3354      	adds	r3, #84	; 0x54
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	3301      	adds	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	429a      	cmp	r2, r3
 8001270:	d3af      	bcc.n	80011d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	e044      	b.n	8001302 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4413      	add	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	440b      	add	r3, r1
 80012c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	3301      	adds	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3b5      	bcc.n	8001278 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	687e      	ldr	r6, [r7, #4]
 8001314:	466d      	mov	r5, sp
 8001316:	f106 0410 	add.w	r4, r6, #16
 800131a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001322:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001326:	e885 0003 	stmia.w	r5, {r0, r1}
 800132a:	1d33      	adds	r3, r6, #4
 800132c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800132e:	6838      	ldr	r0, [r7, #0]
 8001330:	f002 fa48 	bl	80037c4 <USB_DevInit>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2202      	movs	r2, #2
 800133e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00d      	b.n	8001362 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fb97 	bl	8004a8e <USB_DevDisconnect>

  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800136a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <HAL_PCD_Start+0x1c>
 8001382:	2302      	movs	r3, #2
 8001384:	e020      	b.n	80013c8 <HAL_PCD_Start+0x5e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	2b01      	cmp	r3, #1
 8001394:	d109      	bne.n	80013aa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800139a:	2b01      	cmp	r3, #1
 800139c:	d005      	beq.n	80013aa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 f99a 	bl	80036e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fb47 	bl	8004a4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b08d      	sub	sp, #52	; 0x34
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 fc05 	bl	8004bf6 <USB_GetMode>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 848a 	bne.w	8001d08 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fb69 	bl	8004ad0 <USB_ReadInterrupts>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 8480 	beq.w	8001d06 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	0a1b      	lsrs	r3, r3, #8
 8001410:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fb56 	bl	8004ad0 <USB_ReadInterrupts>
 8001424:	4603      	mov	r3, r0
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b02      	cmp	r3, #2
 800142c:	d107      	bne.n	800143e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f002 0202 	and.w	r2, r2, #2
 800143c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f003 fb44 	bl	8004ad0 <USB_ReadInterrupts>
 8001448:	4603      	mov	r3, r0
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b10      	cmp	r3, #16
 8001450:	d161      	bne.n	8001516 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699a      	ldr	r2, [r3, #24]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0210 	bic.w	r2, r2, #16
 8001460:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	f003 020f 	and.w	r2, r3, #15
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	3304      	adds	r3, #4
 8001480:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	0c5b      	lsrs	r3, r3, #17
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	2b02      	cmp	r3, #2
 800148c:	d124      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001494:	4013      	ands	r3, r2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d035      	beq.n	8001506 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	6a38      	ldr	r0, [r7, #32]
 80014ae:	f003 f97b 	bl	80047a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	691a      	ldr	r2, [r3, #16]
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014be:	441a      	add	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	6a1a      	ldr	r2, [r3, #32]
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014d0:	441a      	add	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	621a      	str	r2, [r3, #32]
 80014d6:	e016      	b.n	8001506 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	0c5b      	lsrs	r3, r3, #17
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	2b06      	cmp	r3, #6
 80014e2:	d110      	bne.n	8001506 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014ea:	2208      	movs	r2, #8
 80014ec:	4619      	mov	r1, r3
 80014ee:	6a38      	ldr	r0, [r7, #32]
 80014f0:	f003 f95a 	bl	80047a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	6a1a      	ldr	r2, [r3, #32]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001500:	441a      	add	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0210 	orr.w	r2, r2, #16
 8001514:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f003 fad8 	bl	8004ad0 <USB_ReadInterrupts>
 8001520:	4603      	mov	r3, r0
 8001522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001526:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800152a:	f040 80a7 	bne.w	800167c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f003 fadd 	bl	8004af6 <USB_ReadDevAllOutEpInterrupt>
 800153c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800153e:	e099      	b.n	8001674 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 808e 	beq.w	8001668 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fb01 	bl	8004b5e <USB_ReadDevOutEPInterrupt>
 800155c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00c      	beq.n	8001582 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001574:	461a      	mov	r2, r3
 8001576:	2301      	movs	r3, #1
 8001578:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800157a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fec3 	bl	8002308 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00c      	beq.n	80015a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001598:	461a      	mov	r2, r3
 800159a:	2308      	movs	r3, #8
 800159c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800159e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 ff99 	bl	80024d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	015a      	lsls	r2, r3, #5
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015bc:	461a      	mov	r2, r3
 80015be:	2310      	movs	r3, #16
 80015c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d030      	beq.n	800162e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d4:	2b80      	cmp	r3, #128	; 0x80
 80015d6:	d109      	bne.n	80015ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80015ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	3304      	adds	r3, #4
 8001600:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d108      	bne.n	800161c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2200      	movs	r2, #0
 800160e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4619      	mov	r1, r3
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f005 fe84 	bl	8007324 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	015a      	lsls	r2, r3, #5
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	4413      	add	r3, r2
 8001624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001628:	461a      	mov	r2, r3
 800162a:	2302      	movs	r3, #2
 800162c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	f003 0320 	and.w	r3, r3, #32
 8001634:	2b00      	cmp	r3, #0
 8001636:	d008      	beq.n	800164a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	015a      	lsls	r2, r3, #5
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	4413      	add	r3, r2
 8001640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001644:	461a      	mov	r2, r3
 8001646:	2320      	movs	r3, #32
 8001648:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d009      	beq.n	8001668 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	015a      	lsls	r2, r3, #5
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	4413      	add	r3, r2
 800165c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001660:	461a      	mov	r2, r3
 8001662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001666:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	3301      	adds	r3, #1
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800166e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001670:	085b      	lsrs	r3, r3, #1
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	2b00      	cmp	r3, #0
 8001678:	f47f af62 	bne.w	8001540 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f003 fa25 	bl	8004ad0 <USB_ReadInterrupts>
 8001686:	4603      	mov	r3, r0
 8001688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800168c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001690:	f040 80db 	bne.w	800184a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f003 fa46 	bl	8004b2a <USB_ReadDevAllInEpInterrupt>
 800169e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016a4:	e0cd      	b.n	8001842 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80c2 	beq.w	8001836 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 fa6c 	bl	8004b9a <USB_ReadDevInEPInterrupt>
 80016c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d057      	beq.n	800177e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	2201      	movs	r2, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69f9      	ldr	r1, [r7, #28]
 80016ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016ee:	4013      	ands	r3, r2
 80016f0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	015a      	lsls	r2, r3, #5
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	4413      	add	r3, r2
 80016fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016fe:	461a      	mov	r2, r3
 8001700:	2301      	movs	r3, #1
 8001702:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d132      	bne.n	8001772 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001710:	4613      	mov	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	334c      	adds	r3, #76	; 0x4c
 800171c:	6819      	ldr	r1, [r3, #0]
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4403      	add	r3, r0
 800172c:	3348      	adds	r3, #72	; 0x48
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4419      	add	r1, r3
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4403      	add	r3, r0
 8001740:	334c      	adds	r3, #76	; 0x4c
 8001742:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	2b00      	cmp	r3, #0
 8001748:	d113      	bne.n	8001772 <HAL_PCD_IRQHandler+0x3a2>
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174e:	4613      	mov	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	3354      	adds	r3, #84	; 0x54
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d108      	bne.n	8001772 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800176a:	461a      	mov	r2, r3
 800176c:	2101      	movs	r1, #1
 800176e:	f003 fa73 	bl	8004c58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	b2db      	uxtb	r3, r3
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f005 fd4e 	bl	800721a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	015a      	lsls	r2, r3, #5
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	4413      	add	r3, r2
 8001790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001794:	461a      	mov	r2, r3
 8001796:	2308      	movs	r3, #8
 8001798:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	015a      	lsls	r2, r3, #5
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b0:	461a      	mov	r2, r3
 80017b2:	2310      	movs	r3, #16
 80017b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	015a      	lsls	r2, r3, #5
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017cc:	461a      	mov	r2, r3
 80017ce:	2340      	movs	r3, #64	; 0x40
 80017d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d023      	beq.n	8001824 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80017dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017de:	6a38      	ldr	r0, [r7, #32]
 80017e0:	f002 f954 	bl	8003a8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80017e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	3338      	adds	r3, #56	; 0x38
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	3304      	adds	r3, #4
 80017f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	78db      	ldrb	r3, [r3, #3]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d108      	bne.n	8001812 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2200      	movs	r2, #0
 8001804:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	b2db      	uxtb	r3, r3
 800180a:	4619      	mov	r1, r3
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f005 fd9b 	bl	8007348 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	015a      	lsls	r2, r3, #5
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800181e:	461a      	mov	r2, r3
 8001820:	2302      	movs	r3, #2
 8001822:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800182e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 fcdb 	bl	80021ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	3301      	adds	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800183c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183e:	085b      	lsrs	r3, r3, #1
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001844:	2b00      	cmp	r3, #0
 8001846:	f47f af2e 	bne.w	80016a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f003 f93e 	bl	8004ad0 <USB_ReadInterrupts>
 8001854:	4603      	mov	r3, r0
 8001856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800185a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800185e:	d122      	bne.n	80018a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800187a:	2b01      	cmp	r3, #1
 800187c:	d108      	bne.n	8001890 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001886:	2100      	movs	r1, #0
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fec3 	bl	8002614 <HAL_PCDEx_LPM_Callback>
 800188e:	e002      	b.n	8001896 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f005 fd39 	bl	8007308 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f003 f910 	bl	8004ad0 <USB_ReadInterrupts>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ba:	d112      	bne.n	80018e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d102      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f005 fcf5 	bl	80072bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018e0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 f8f2 	bl	8004ad0 <USB_ReadInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f6:	f040 80b7 	bne.w	8001a68 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2110      	movs	r1, #16
 8001914:	4618      	mov	r0, r3
 8001916:	f002 f8b9 	bl	8003a8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800191e:	e046      	b.n	80019ae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	015a      	lsls	r2, r3, #5
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4413      	add	r3, r2
 8001928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800192c:	461a      	mov	r2, r3
 800192e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001932:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001944:	0151      	lsls	r1, r2, #5
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	440a      	add	r2, r1
 800194a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800194e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001952:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	4413      	add	r3, r2
 800195c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001960:	461a      	mov	r2, r3
 8001962:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001966:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001978:	0151      	lsls	r1, r2, #5
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	440a      	add	r2, r1
 800197e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001982:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001986:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198a:	015a      	lsls	r2, r3, #5
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	4413      	add	r3, r2
 8001990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001998:	0151      	lsls	r1, r2, #5
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	440a      	add	r2, r1
 800199e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019aa:	3301      	adds	r3, #1
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3b3      	bcc.n	8001920 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80019ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d016      	beq.n	8001a02 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019e4:	f043 030b 	orr.w	r3, r3, #11
 80019e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019fa:	f043 030b 	orr.w	r3, r3, #11
 80019fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001a00:	e015      	b.n	8001a2e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a14:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a18:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a28:	f043 030b 	orr.w	r3, r3, #11
 8001a2c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a3c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a40:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a52:	461a      	mov	r2, r3
 8001a54:	f003 f900 	bl	8004c58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 f82f 	bl	8004ad0 <USB_ReadInterrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a7c:	d124      	bne.n	8001ac8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 f8c5 	bl	8004c12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 f87a 	bl	8003b86 <USB_GetDevSpeed>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681c      	ldr	r4, [r3, #0]
 8001a9e:	f001 fa29 	bl	8002ef4 <HAL_RCC_GetHCLKFreq>
 8001aa2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4620      	mov	r0, r4
 8001aae:	f001 fd79 	bl	80035a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f005 fbd9 	bl	800726a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 ffff 	bl	8004ad0 <USB_ReadInterrupts>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d10a      	bne.n	8001af2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f005 fbb6 	bl	800724e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f002 0208 	and.w	r2, r2, #8
 8001af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 ffea 	bl	8004ad0 <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	2b80      	cmp	r3, #128	; 0x80
 8001b04:	d122      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b12:	2301      	movs	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
 8001b16:	e014      	b.n	8001b42 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	4619      	mov	r1, r3
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 fb27 	bl	800218a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	3301      	adds	r3, #1
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d3e5      	bcc.n	8001b18 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 ffbd 	bl	8004ad0 <USB_ReadInterrupts>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b60:	d13b      	bne.n	8001bda <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b62:	2301      	movs	r3, #1
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	e02b      	b.n	8001bc0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	3340      	adds	r3, #64	; 0x40
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d115      	bne.n	8001bba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da12      	bge.n	8001bba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	333f      	adds	r3, #63	; 0x3f
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fae8 	bl	800218a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d3ce      	bcc.n	8001b68 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 ff76 	bl	8004ad0 <USB_ReadInterrupts>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bee:	d155      	bne.n	8001c9c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf4:	e045      	b.n	8001c82 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d12e      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	da2b      	bge.n	8001c7c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001c30:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d121      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10a      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c78:	6053      	str	r3, [r2, #4]
            break;
 8001c7a:	e007      	b.n	8001c8c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	3301      	adds	r3, #1
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d3b4      	bcc.n	8001bf6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 ff15 	bl	8004ad0 <USB_ReadInterrupts>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb0:	d10a      	bne.n	8001cc8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f005 fb5a 	bl	800736c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 feff 	bl	8004ad0 <USB_ReadInterrupts>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d115      	bne.n	8001d08 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f005 fb4a 	bl	8007388 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	e000      	b.n	8001d08 <HAL_PCD_IRQHandler+0x938>
      return;
 8001d06:	bf00      	nop
    }
  }
}
 8001d08:	3734      	adds	r7, #52	; 0x34
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}

08001d0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_PCD_SetAddress+0x1a>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e013      	b.n	8001d50 <HAL_PCD_SetAddress+0x42>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f002 fe5d 	bl	8004a00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	4608      	mov	r0, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	461a      	mov	r2, r3
 8001d66:	4603      	mov	r3, r0
 8001d68:	70fb      	strb	r3, [r7, #3]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	803b      	strh	r3, [r7, #0]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	da0f      	bge.n	8001d9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	f003 020f 	and.w	r2, r3, #15
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	3338      	adds	r3, #56	; 0x38
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	3304      	adds	r3, #4
 8001d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	705a      	strb	r2, [r3, #1]
 8001d9c:	e00f      	b.n	8001dbe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	3304      	adds	r3, #4
 8001db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dca:	883a      	ldrh	r2, [r7, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	78ba      	ldrb	r2, [r7, #2]
 8001dd4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001de8:	78bb      	ldrb	r3, [r7, #2]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d102      	bne.n	8001df4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_PCD_EP_Open+0xaa>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e00e      	b.n	8001e20 <HAL_PCD_EP_Open+0xc8>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68f9      	ldr	r1, [r7, #12]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f001 fedd 	bl	8003bd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	da0f      	bge.n	8001e5c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	f003 020f 	and.w	r2, r3, #15
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	3338      	adds	r3, #56	; 0x38
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	3304      	adds	r3, #4
 8001e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	705a      	strb	r2, [r3, #1]
 8001e5a:	e00f      	b.n	8001e7c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	f003 020f 	and.w	r2, r3, #15
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	3304      	adds	r3, #4
 8001e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_PCD_EP_Close+0x6e>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e00e      	b.n	8001eb4 <HAL_PCD_EP_Close+0x8c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68f9      	ldr	r1, [r7, #12]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 ff1b 	bl	8003ce0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ecc:	7afb      	ldrb	r3, [r7, #11]
 8001ece:	f003 020f 	and.w	r2, r3, #15
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2200      	movs	r2, #0
 8001efc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d102      	bne.n	8001f18 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	6979      	ldr	r1, [r7, #20]
 8001f30:	f002 f9fa 	bl	8004328 <USB_EP0StartXfer>
 8001f34:	e008      	b.n	8001f48 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	6979      	ldr	r1, [r7, #20]
 8001f44:	f001 ffa8 	bl	8003e98 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	f003 020f 	and.w	r2, r3, #15
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f74:	681b      	ldr	r3, [r3, #0]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f92:	7afb      	ldrb	r3, [r7, #11]
 8001f94:	f003 020f 	and.w	r2, r3, #15
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	3338      	adds	r3, #56	; 0x38
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc2:	7afb      	ldrb	r3, [r7, #11]
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d102      	bne.n	8001fdc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	6979      	ldr	r1, [r7, #20]
 8001ff4:	f002 f998 	bl	8004328 <USB_EP0StartXfer>
 8001ff8:	e008      	b.n	800200c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	6979      	ldr	r1, [r7, #20]
 8002008:	f001 ff46 	bl	8003e98 <USB_EPStartXfer>
  }

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	f003 020f 	and.w	r2, r3, #15
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	d901      	bls.n	8002034 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e050      	b.n	80020d6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002038:	2b00      	cmp	r3, #0
 800203a:	da0f      	bge.n	800205c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 020f 	and.w	r2, r3, #15
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	3338      	adds	r3, #56	; 0x38
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	3304      	adds	r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	705a      	strb	r2, [r3, #1]
 800205a:	e00d      	b.n	8002078 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_PCD_EP_SetStall+0x82>
 8002094:	2302      	movs	r3, #2
 8002096:	e01e      	b.n	80020d6 <HAL_PCD_EP_SetStall+0xc0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68f9      	ldr	r1, [r7, #12]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 fbd6 	bl	8004858 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10a      	bne.n	80020cc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	b2d9      	uxtb	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020c6:	461a      	mov	r2, r3
 80020c8:	f002 fdc6 	bl	8004c58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 020f 	and.w	r2, r3, #15
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d901      	bls.n	80020fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e042      	b.n	8002182 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002100:	2b00      	cmp	r3, #0
 8002102:	da0f      	bge.n	8002124 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	f003 020f 	and.w	r2, r3, #15
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	3338      	adds	r3, #56	; 0x38
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	3304      	adds	r3, #4
 800211a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	705a      	strb	r2, [r3, #1]
 8002122:	e00f      	b.n	8002144 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	f003 020f 	and.w	r2, r3, #15
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	3304      	adds	r3, #4
 800213c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	b2da      	uxtb	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_PCD_EP_ClrStall+0x86>
 8002160:	2302      	movs	r3, #2
 8002162:	e00e      	b.n	8002182 <HAL_PCD_EP_ClrStall+0xa4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68f9      	ldr	r1, [r7, #12]
 8002172:	4618      	mov	r0, r3
 8002174:	f002 fbde 	bl	8004934 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800219a:	2b00      	cmp	r3, #0
 800219c:	da0c      	bge.n	80021b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 020f 	and.w	r2, r3, #15
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	3338      	adds	r3, #56	; 0x38
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	3304      	adds	r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	e00c      	b.n	80021d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	f003 020f 	and.w	r2, r3, #15
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	3304      	adds	r3, #4
 80021d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68f9      	ldr	r1, [r7, #12]
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 f9fd 	bl	80045d8 <USB_EPStopXfer>
 80021de:	4603      	mov	r3, r0
 80021e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021e2:	7afb      	ldrb	r3, [r7, #11]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	3338      	adds	r3, #56	; 0x38
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a1a      	ldr	r2, [r3, #32]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	429a      	cmp	r2, r3
 800221e:	d901      	bls.n	8002224 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e06c      	b.n	80022fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	429a      	cmp	r2, r3
 8002238:	d902      	bls.n	8002240 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3303      	adds	r3, #3
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002248:	e02b      	b.n	80022a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	429a      	cmp	r2, r3
 800225e:	d902      	bls.n	8002266 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3303      	adds	r3, #3
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6919      	ldr	r1, [r3, #16]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800227e:	b2db      	uxtb	r3, r3
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	4603      	mov	r3, r0
 8002284:	6978      	ldr	r0, [r7, #20]
 8002286:	f002 fa51 	bl	800472c <USB_WritePacket>

    ep->xfer_buff  += len;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	441a      	add	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a1a      	ldr	r2, [r3, #32]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	441a      	add	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d809      	bhi.n	80022cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d203      	bcs.n	80022cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1be      	bne.n	800224a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	699a      	ldr	r2, [r3, #24]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d811      	bhi.n	80022fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	2201      	movs	r2, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	6939      	ldr	r1, [r7, #16]
 80022f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022f8:	4013      	ands	r3, r2
 80022fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	333c      	adds	r3, #60	; 0x3c
 8002320:	3304      	adds	r3, #4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	4413      	add	r3, r2
 800232e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d17b      	bne.n	8002436 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d015      	beq.n	8002374 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	4a61      	ldr	r2, [pc, #388]	; (80024d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	f240 80b9 	bls.w	80024c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80b3 	beq.w	80024c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236a:	461a      	mov	r2, r3
 800236c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002370:	6093      	str	r3, [r2, #8]
 8002372:	e0a7      	b.n	80024c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238a:	461a      	mov	r2, r3
 800238c:	2320      	movs	r3, #32
 800238e:	6093      	str	r3, [r2, #8]
 8002390:	e098      	b.n	80024c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	f040 8093 	bne.w	80024c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4a4b      	ldr	r2, [pc, #300]	; (80024d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d90f      	bls.n	80023c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023bc:	461a      	mov	r2, r3
 80023be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c2:	6093      	str	r3, [r2, #8]
 80023c4:	e07e      	b.n	80024c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	3304      	adds	r3, #4
 80023da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	0159      	lsls	r1, r3, #5
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	440b      	add	r3, r1
 80023e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	1ad2      	subs	r2, r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d114      	bne.n	8002428 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002410:	461a      	mov	r2, r3
 8002412:	2101      	movs	r1, #1
 8002414:	f002 fc20 	bl	8004c58 <USB_EP0_OutStart>
 8002418:	e006      	b.n	8002428 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	441a      	add	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	4619      	mov	r1, r3
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f004 fed8 	bl	80071e4 <HAL_PCD_DataOutStageCallback>
 8002434:	e046      	b.n	80024c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	4a26      	ldr	r2, [pc, #152]	; (80024d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d124      	bne.n	8002488 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002454:	461a      	mov	r2, r3
 8002456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800245a:	6093      	str	r3, [r2, #8]
 800245c:	e032      	b.n	80024c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002474:	461a      	mov	r2, r3
 8002476:	2320      	movs	r3, #32
 8002478:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	4619      	mov	r1, r3
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f004 feaf 	bl	80071e4 <HAL_PCD_DataOutStageCallback>
 8002486:	e01d      	b.n	80024c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d114      	bne.n	80024b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d108      	bne.n	80024b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024b0:	461a      	mov	r2, r3
 80024b2:	2100      	movs	r1, #0
 80024b4:	f002 fbd0 	bl	8004c58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f004 fe90 	bl	80071e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3720      	adds	r7, #32
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	4f54300a 	.word	0x4f54300a
 80024d4:	4f54310a 	.word	0x4f54310a

080024d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	333c      	adds	r3, #60	; 0x3c
 80024f0:	3304      	adds	r3, #4
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4a15      	ldr	r2, [pc, #84]	; (8002560 <PCD_EP_OutSetupPacket_int+0x88>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d90e      	bls.n	800252c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002524:	461a      	mov	r2, r3
 8002526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800252a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f004 fe47 	bl	80071c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <PCD_EP_OutSetupPacket_int+0x88>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d90c      	bls.n	8002554 <PCD_EP_OutSetupPacket_int+0x7c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d108      	bne.n	8002554 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800254c:	461a      	mov	r2, r3
 800254e:	2101      	movs	r1, #1
 8002550:	f002 fb82 	bl	8004c58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	4f54300a 	.word	0x4f54300a

08002564 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
 8002570:	4613      	mov	r3, r2
 8002572:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d107      	bne.n	8002592 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002582:	883b      	ldrh	r3, [r7, #0]
 8002584:	0419      	lsls	r1, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	430a      	orrs	r2, r1
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
 8002590:	e028      	b.n	80025e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	4413      	add	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e00d      	b.n	80025c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	3340      	adds	r3, #64	; 0x40
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	4413      	add	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	3301      	adds	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d3ec      	bcc.n	80025a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025cc:	883b      	ldrh	r3, [r7, #0]
 80025ce:	0418      	lsls	r0, r3, #16
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	4302      	orrs	r2, r0
 80025dc:	3340      	adds	r3, #64	; 0x40
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e267      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d075      	beq.n	8002736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264a:	4b88      	ldr	r3, [pc, #544]	; (800286c <HAL_RCC_OscConfig+0x240>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b04      	cmp	r3, #4
 8002654:	d00c      	beq.n	8002670 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002656:	4b85      	ldr	r3, [pc, #532]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265e:	2b08      	cmp	r3, #8
 8002660:	d112      	bne.n	8002688 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002662:	4b82      	ldr	r3, [pc, #520]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800266e:	d10b      	bne.n	8002688 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	4b7e      	ldr	r3, [pc, #504]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d05b      	beq.n	8002734 <HAL_RCC_OscConfig+0x108>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d157      	bne.n	8002734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e242      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_OscConfig+0x74>
 8002692:	4b76      	ldr	r3, [pc, #472]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a75      	ldr	r2, [pc, #468]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e01d      	b.n	80026dc <HAL_RCC_OscConfig+0xb0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x98>
 80026aa:	4b70      	ldr	r3, [pc, #448]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6f      	ldr	r2, [pc, #444]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b6d      	ldr	r3, [pc, #436]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a6c      	ldr	r2, [pc, #432]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e00b      	b.n	80026dc <HAL_RCC_OscConfig+0xb0>
 80026c4:	4b69      	ldr	r3, [pc, #420]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a68      	ldr	r2, [pc, #416]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b66      	ldr	r3, [pc, #408]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a65      	ldr	r2, [pc, #404]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fa04 	bl	8000af0 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ec:	f7fe fa00 	bl	8000af0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e207      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b5b      	ldr	r3, [pc, #364]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0xc0>
 800270a:	e014      	b.n	8002736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe f9f0 	bl	8000af0 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002714:	f7fe f9ec 	bl	8000af0 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e1f3      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	4b51      	ldr	r3, [pc, #324]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0xe8>
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d063      	beq.n	800280a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002742:	4b4a      	ldr	r3, [pc, #296]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002756:	2b08      	cmp	r3, #8
 8002758:	d11c      	bne.n	8002794 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275a:	4b44      	ldr	r3, [pc, #272]	; (800286c <HAL_RCC_OscConfig+0x240>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d116      	bne.n	8002794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	4b41      	ldr	r3, [pc, #260]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_RCC_OscConfig+0x152>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e1c7      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	4b3b      	ldr	r3, [pc, #236]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4937      	ldr	r1, [pc, #220]	; (800286c <HAL_RCC_OscConfig+0x240>)
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	e03a      	b.n	800280a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800279c:	4b34      	ldr	r3, [pc, #208]	; (8002870 <HAL_RCC_OscConfig+0x244>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe f9a5 	bl	8000af0 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027aa:	f7fe f9a1 	bl	8000af0 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e1a8      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	4b2b      	ldr	r3, [pc, #172]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4925      	ldr	r1, [pc, #148]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCC_OscConfig+0x244>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe f984 	bl	8000af0 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ec:	f7fe f980 	bl	8000af0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e187      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d036      	beq.n	8002884 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d016      	beq.n	800284c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <HAL_RCC_OscConfig+0x248>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe f964 	bl	8000af0 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282c:	f7fe f960 	bl	8000af0 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e167      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x200>
 800284a:	e01b      	b.n	8002884 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_OscConfig+0x248>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002852:	f7fe f94d 	bl	8000af0 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	e00e      	b.n	8002878 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285a:	f7fe f949 	bl	8000af0 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d907      	bls.n	8002878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e150      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
 800286c:	40023800 	.word	0x40023800
 8002870:	42470000 	.word	0x42470000
 8002874:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002878:	4b88      	ldr	r3, [pc, #544]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800287a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ea      	bne.n	800285a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8097 	beq.w	80029c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002896:	4b81      	ldr	r3, [pc, #516]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10f      	bne.n	80028c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	4b7d      	ldr	r3, [pc, #500]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a7c      	ldr	r2, [pc, #496]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b7a      	ldr	r3, [pc, #488]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4b77      	ldr	r3, [pc, #476]	; (8002aa0 <HAL_RCC_OscConfig+0x474>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d118      	bne.n	8002900 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ce:	4b74      	ldr	r3, [pc, #464]	; (8002aa0 <HAL_RCC_OscConfig+0x474>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a73      	ldr	r2, [pc, #460]	; (8002aa0 <HAL_RCC_OscConfig+0x474>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028da:	f7fe f909 	bl	8000af0 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7fe f905 	bl	8000af0 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e10c      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x474>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x2ea>
 8002908:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	4a63      	ldr	r2, [pc, #396]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6713      	str	r3, [r2, #112]	; 0x70
 8002914:	e01c      	b.n	8002950 <HAL_RCC_OscConfig+0x324>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b05      	cmp	r3, #5
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x30c>
 800291e:	4b5f      	ldr	r3, [pc, #380]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	4a5e      	ldr	r2, [pc, #376]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	6713      	str	r3, [r2, #112]	; 0x70
 800292a:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	4a5b      	ldr	r2, [pc, #364]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6713      	str	r3, [r2, #112]	; 0x70
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0x324>
 8002938:	4b58      	ldr	r3, [pc, #352]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	4a57      	ldr	r2, [pc, #348]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	6713      	str	r3, [r2, #112]	; 0x70
 8002944:	4b55      	ldr	r3, [pc, #340]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800294a:	f023 0304 	bic.w	r3, r3, #4
 800294e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d015      	beq.n	8002984 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7fe f8ca 	bl	8000af0 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295e:	e00a      	b.n	8002976 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7fe f8c6 	bl	8000af0 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e0cb      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002976:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0ee      	beq.n	8002960 <HAL_RCC_OscConfig+0x334>
 8002982:	e014      	b.n	80029ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7fe f8b4 	bl	8000af0 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7fe f8b0 	bl	8000af0 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e0b5      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a2:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ee      	bne.n	800298c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d105      	bne.n	80029c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b4:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	4a38      	ldr	r2, [pc, #224]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80029ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80a1 	beq.w	8002b0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ca:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d05c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d141      	bne.n	8002a62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <HAL_RCC_OscConfig+0x478>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7fe f884 	bl	8000af0 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe f880 	bl	8000af0 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e087      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fe:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69da      	ldr	r2, [r3, #28]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	019b      	lsls	r3, r3, #6
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	3b01      	subs	r3, #1
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	491b      	ldr	r1, [pc, #108]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_RCC_OscConfig+0x478>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe f859 	bl	8000af0 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a42:	f7fe f855 	bl	8000af0 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e05c      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x416>
 8002a60:	e054      	b.n	8002b0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <HAL_RCC_OscConfig+0x478>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe f842 	bl	8000af0 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a70:	f7fe f83e 	bl	8000af0 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e045      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x444>
 8002a8e:	e03d      	b.n	8002b0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e038      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x4ec>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d028      	beq.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d121      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d11a      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ad8:	4013      	ands	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d111      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	3b01      	subs	r3, #1
 8002af2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d107      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800

08002b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0cc      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b30:	4b68      	ldr	r3, [pc, #416]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d90c      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b63      	ldr	r3, [pc, #396]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b8      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	494d      	ldr	r1, [pc, #308]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d044      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d119      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e07f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d003      	beq.n	8002bda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bea:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e067      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4934      	ldr	r1, [pc, #208]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c0c:	f7fd ff70 	bl	8000af0 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7fd ff6c 	bl	8000af0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e04f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 020c 	and.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1eb      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d20c      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e032      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4916      	ldr	r1, [pc, #88]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ca2:	f000 f821 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	490a      	ldr	r1, [pc, #40]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	5ccb      	ldrb	r3, [r1, r3]
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fed0 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023c00 	.word	0x40023c00
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	08007824 	.word	0x08007824
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	20000004 	.word	0x20000004

08002ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cec:	b094      	sub	sp, #80	; 0x50
 8002cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d00:	4b79      	ldr	r3, [pc, #484]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d00d      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x40>
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	f200 80e1 	bhi.w	8002ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x34>
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d003      	beq.n	8002d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d1a:	e0db      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b73      	ldr	r3, [pc, #460]	; (8002eec <HAL_RCC_GetSysClockFreq+0x204>)
 8002d1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d20:	e0db      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d22:	4b73      	ldr	r3, [pc, #460]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d26:	e0d8      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d28:	4b6f      	ldr	r3, [pc, #444]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d32:	4b6d      	ldr	r3, [pc, #436]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d063      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	099b      	lsrs	r3, r3, #6
 8002d44:	2200      	movs	r2, #0
 8002d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d50:	633b      	str	r3, [r7, #48]	; 0x30
 8002d52:	2300      	movs	r3, #0
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34
 8002d56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d5a:	4622      	mov	r2, r4
 8002d5c:	462b      	mov	r3, r5
 8002d5e:	f04f 0000 	mov.w	r0, #0
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	0159      	lsls	r1, r3, #5
 8002d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d6c:	0150      	lsls	r0, r2, #5
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4621      	mov	r1, r4
 8002d74:	1a51      	subs	r1, r2, r1
 8002d76:	6139      	str	r1, [r7, #16]
 8002d78:	4629      	mov	r1, r5
 8002d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d8c:	4659      	mov	r1, fp
 8002d8e:	018b      	lsls	r3, r1, #6
 8002d90:	4651      	mov	r1, sl
 8002d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d96:	4651      	mov	r1, sl
 8002d98:	018a      	lsls	r2, r1, #6
 8002d9a:	4651      	mov	r1, sl
 8002d9c:	ebb2 0801 	subs.w	r8, r2, r1
 8002da0:	4659      	mov	r1, fp
 8002da2:	eb63 0901 	sbc.w	r9, r3, r1
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dba:	4690      	mov	r8, r2
 8002dbc:	4699      	mov	r9, r3
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	eb18 0303 	adds.w	r3, r8, r3
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	462b      	mov	r3, r5
 8002dc8:	eb49 0303 	adc.w	r3, r9, r3
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dda:	4629      	mov	r1, r5
 8002ddc:	024b      	lsls	r3, r1, #9
 8002dde:	4621      	mov	r1, r4
 8002de0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002de4:	4621      	mov	r1, r4
 8002de6:	024a      	lsls	r2, r1, #9
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dee:	2200      	movs	r2, #0
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002df4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002df8:	f7fd f9f8 	bl	80001ec <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4613      	mov	r3, r2
 8002e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e04:	e058      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e06:	4b38      	ldr	r3, [pc, #224]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	099b      	lsrs	r3, r3, #6
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	4611      	mov	r1, r2
 8002e12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e16:	623b      	str	r3, [r7, #32]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e20:	4642      	mov	r2, r8
 8002e22:	464b      	mov	r3, r9
 8002e24:	f04f 0000 	mov.w	r0, #0
 8002e28:	f04f 0100 	mov.w	r1, #0
 8002e2c:	0159      	lsls	r1, r3, #5
 8002e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e32:	0150      	lsls	r0, r2, #5
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4641      	mov	r1, r8
 8002e3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e3e:	4649      	mov	r1, r9
 8002e40:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e58:	ebb2 040a 	subs.w	r4, r2, sl
 8002e5c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	00eb      	lsls	r3, r5, #3
 8002e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e6e:	00e2      	lsls	r2, r4, #3
 8002e70:	4614      	mov	r4, r2
 8002e72:	461d      	mov	r5, r3
 8002e74:	4643      	mov	r3, r8
 8002e76:	18e3      	adds	r3, r4, r3
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	464b      	mov	r3, r9
 8002e7c:	eb45 0303 	adc.w	r3, r5, r3
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e8e:	4629      	mov	r1, r5
 8002e90:	028b      	lsls	r3, r1, #10
 8002e92:	4621      	mov	r1, r4
 8002e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e98:	4621      	mov	r1, r4
 8002e9a:	028a      	lsls	r2, r1, #10
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	61fa      	str	r2, [r7, #28]
 8002ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eac:	f7fd f99e 	bl	80001ec <__aeabi_uldivmod>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ec8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ed2:	e002      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetSysClockFreq+0x204>)
 8002ed6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3750      	adds	r7, #80	; 0x50
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	00f42400 	.word	0x00f42400
 8002ef0:	007a1200 	.word	0x007a1200

08002ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20000000 	.word	0x20000000

08002f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f10:	f7ff fff0 	bl	8002ef4 <HAL_RCC_GetHCLKFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	0a9b      	lsrs	r3, r3, #10
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4903      	ldr	r1, [pc, #12]	; (8002f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	08007834 	.word	0x08007834

08002f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f38:	f7ff ffdc 	bl	8002ef4 <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0b5b      	lsrs	r3, r3, #13
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4903      	ldr	r1, [pc, #12]	; (8002f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40023800 	.word	0x40023800
 8002f58:	08007834 	.word	0x08007834

08002f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e03f      	b.n	8002fee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fd fc8e 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2224      	movs	r2, #36	; 0x24
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f829 	bl	8002ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ffc:	b0c0      	sub	sp, #256	; 0x100
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	68d9      	ldr	r1, [r3, #12]
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	ea40 0301 	orr.w	r3, r0, r1
 8003020:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	431a      	orrs	r2, r3
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	431a      	orrs	r2, r3
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003050:	f021 010c 	bic.w	r1, r1, #12
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800305e:	430b      	orrs	r3, r1
 8003060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003072:	6999      	ldr	r1, [r3, #24]
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	ea40 0301 	orr.w	r3, r0, r1
 800307e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b8f      	ldr	r3, [pc, #572]	; (80032c4 <UART_SetConfig+0x2cc>)
 8003088:	429a      	cmp	r2, r3
 800308a:	d005      	beq.n	8003098 <UART_SetConfig+0xa0>
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b8d      	ldr	r3, [pc, #564]	; (80032c8 <UART_SetConfig+0x2d0>)
 8003094:	429a      	cmp	r2, r3
 8003096:	d104      	bne.n	80030a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003098:	f7ff ff4c 	bl	8002f34 <HAL_RCC_GetPCLK2Freq>
 800309c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030a0:	e003      	b.n	80030aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030a2:	f7ff ff33 	bl	8002f0c <HAL_RCC_GetPCLK1Freq>
 80030a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b4:	f040 810c 	bne.w	80032d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030ca:	4622      	mov	r2, r4
 80030cc:	462b      	mov	r3, r5
 80030ce:	1891      	adds	r1, r2, r2
 80030d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80030d2:	415b      	adcs	r3, r3
 80030d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030da:	4621      	mov	r1, r4
 80030dc:	eb12 0801 	adds.w	r8, r2, r1
 80030e0:	4629      	mov	r1, r5
 80030e2:	eb43 0901 	adc.w	r9, r3, r1
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030fa:	4690      	mov	r8, r2
 80030fc:	4699      	mov	r9, r3
 80030fe:	4623      	mov	r3, r4
 8003100:	eb18 0303 	adds.w	r3, r8, r3
 8003104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003108:	462b      	mov	r3, r5
 800310a:	eb49 0303 	adc.w	r3, r9, r3
 800310e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800311e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003126:	460b      	mov	r3, r1
 8003128:	18db      	adds	r3, r3, r3
 800312a:	653b      	str	r3, [r7, #80]	; 0x50
 800312c:	4613      	mov	r3, r2
 800312e:	eb42 0303 	adc.w	r3, r2, r3
 8003132:	657b      	str	r3, [r7, #84]	; 0x54
 8003134:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003138:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800313c:	f7fd f856 	bl	80001ec <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4b61      	ldr	r3, [pc, #388]	; (80032cc <UART_SetConfig+0x2d4>)
 8003146:	fba3 2302 	umull	r2, r3, r3, r2
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	011c      	lsls	r4, r3, #4
 800314e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003152:	2200      	movs	r2, #0
 8003154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003158:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800315c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003160:	4642      	mov	r2, r8
 8003162:	464b      	mov	r3, r9
 8003164:	1891      	adds	r1, r2, r2
 8003166:	64b9      	str	r1, [r7, #72]	; 0x48
 8003168:	415b      	adcs	r3, r3
 800316a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800316c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003170:	4641      	mov	r1, r8
 8003172:	eb12 0a01 	adds.w	sl, r2, r1
 8003176:	4649      	mov	r1, r9
 8003178:	eb43 0b01 	adc.w	fp, r3, r1
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003188:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800318c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003190:	4692      	mov	sl, r2
 8003192:	469b      	mov	fp, r3
 8003194:	4643      	mov	r3, r8
 8003196:	eb1a 0303 	adds.w	r3, sl, r3
 800319a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800319e:	464b      	mov	r3, r9
 80031a0:	eb4b 0303 	adc.w	r3, fp, r3
 80031a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031bc:	460b      	mov	r3, r1
 80031be:	18db      	adds	r3, r3, r3
 80031c0:	643b      	str	r3, [r7, #64]	; 0x40
 80031c2:	4613      	mov	r3, r2
 80031c4:	eb42 0303 	adc.w	r3, r2, r3
 80031c8:	647b      	str	r3, [r7, #68]	; 0x44
 80031ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031d2:	f7fd f80b 	bl	80001ec <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <UART_SetConfig+0x2d4>)
 80031de:	fba3 2301 	umull	r2, r3, r3, r1
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2264      	movs	r2, #100	; 0x64
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	1acb      	subs	r3, r1, r3
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031f2:	4b36      	ldr	r3, [pc, #216]	; (80032cc <UART_SetConfig+0x2d4>)
 80031f4:	fba3 2302 	umull	r2, r3, r3, r2
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003200:	441c      	add	r4, r3
 8003202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003206:	2200      	movs	r2, #0
 8003208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800320c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003210:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003214:	4642      	mov	r2, r8
 8003216:	464b      	mov	r3, r9
 8003218:	1891      	adds	r1, r2, r2
 800321a:	63b9      	str	r1, [r7, #56]	; 0x38
 800321c:	415b      	adcs	r3, r3
 800321e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003224:	4641      	mov	r1, r8
 8003226:	1851      	adds	r1, r2, r1
 8003228:	6339      	str	r1, [r7, #48]	; 0x30
 800322a:	4649      	mov	r1, r9
 800322c:	414b      	adcs	r3, r1
 800322e:	637b      	str	r3, [r7, #52]	; 0x34
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800323c:	4659      	mov	r1, fp
 800323e:	00cb      	lsls	r3, r1, #3
 8003240:	4651      	mov	r1, sl
 8003242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003246:	4651      	mov	r1, sl
 8003248:	00ca      	lsls	r2, r1, #3
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	4603      	mov	r3, r0
 8003250:	4642      	mov	r2, r8
 8003252:	189b      	adds	r3, r3, r2
 8003254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003258:	464b      	mov	r3, r9
 800325a:	460a      	mov	r2, r1
 800325c:	eb42 0303 	adc.w	r3, r2, r3
 8003260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003270:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003274:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003278:	460b      	mov	r3, r1
 800327a:	18db      	adds	r3, r3, r3
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
 800327e:	4613      	mov	r3, r2
 8003280:	eb42 0303 	adc.w	r3, r2, r3
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800328a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800328e:	f7fc ffad 	bl	80001ec <__aeabi_uldivmod>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <UART_SetConfig+0x2d4>)
 8003298:	fba3 1302 	umull	r1, r3, r3, r2
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	2164      	movs	r1, #100	; 0x64
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	3332      	adds	r3, #50	; 0x32
 80032aa:	4a08      	ldr	r2, [pc, #32]	; (80032cc <UART_SetConfig+0x2d4>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	f003 0207 	and.w	r2, r3, #7
 80032b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4422      	add	r2, r4
 80032be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032c0:	e105      	b.n	80034ce <UART_SetConfig+0x4d6>
 80032c2:	bf00      	nop
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40011400 	.word	0x40011400
 80032cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032e2:	4642      	mov	r2, r8
 80032e4:	464b      	mov	r3, r9
 80032e6:	1891      	adds	r1, r2, r2
 80032e8:	6239      	str	r1, [r7, #32]
 80032ea:	415b      	adcs	r3, r3
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
 80032ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032f2:	4641      	mov	r1, r8
 80032f4:	1854      	adds	r4, r2, r1
 80032f6:	4649      	mov	r1, r9
 80032f8:	eb43 0501 	adc.w	r5, r3, r1
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	00eb      	lsls	r3, r5, #3
 8003306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800330a:	00e2      	lsls	r2, r4, #3
 800330c:	4614      	mov	r4, r2
 800330e:	461d      	mov	r5, r3
 8003310:	4643      	mov	r3, r8
 8003312:	18e3      	adds	r3, r4, r3
 8003314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003318:	464b      	mov	r3, r9
 800331a:	eb45 0303 	adc.w	r3, r5, r3
 800331e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800332e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800333e:	4629      	mov	r1, r5
 8003340:	008b      	lsls	r3, r1, #2
 8003342:	4621      	mov	r1, r4
 8003344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003348:	4621      	mov	r1, r4
 800334a:	008a      	lsls	r2, r1, #2
 800334c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003350:	f7fc ff4c 	bl	80001ec <__aeabi_uldivmod>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4b60      	ldr	r3, [pc, #384]	; (80034dc <UART_SetConfig+0x4e4>)
 800335a:	fba3 2302 	umull	r2, r3, r3, r2
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	011c      	lsls	r4, r3, #4
 8003362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003366:	2200      	movs	r2, #0
 8003368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800336c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003370:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003374:	4642      	mov	r2, r8
 8003376:	464b      	mov	r3, r9
 8003378:	1891      	adds	r1, r2, r2
 800337a:	61b9      	str	r1, [r7, #24]
 800337c:	415b      	adcs	r3, r3
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003384:	4641      	mov	r1, r8
 8003386:	1851      	adds	r1, r2, r1
 8003388:	6139      	str	r1, [r7, #16]
 800338a:	4649      	mov	r1, r9
 800338c:	414b      	adcs	r3, r1
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800339c:	4659      	mov	r1, fp
 800339e:	00cb      	lsls	r3, r1, #3
 80033a0:	4651      	mov	r1, sl
 80033a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a6:	4651      	mov	r1, sl
 80033a8:	00ca      	lsls	r2, r1, #3
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	4603      	mov	r3, r0
 80033b0:	4642      	mov	r2, r8
 80033b2:	189b      	adds	r3, r3, r2
 80033b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033b8:	464b      	mov	r3, r9
 80033ba:	460a      	mov	r2, r1
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80033ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033dc:	4649      	mov	r1, r9
 80033de:	008b      	lsls	r3, r1, #2
 80033e0:	4641      	mov	r1, r8
 80033e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e6:	4641      	mov	r1, r8
 80033e8:	008a      	lsls	r2, r1, #2
 80033ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033ee:	f7fc fefd 	bl	80001ec <__aeabi_uldivmod>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4b39      	ldr	r3, [pc, #228]	; (80034dc <UART_SetConfig+0x4e4>)
 80033f8:	fba3 1302 	umull	r1, r3, r3, r2
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	2164      	movs	r1, #100	; 0x64
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	3332      	adds	r3, #50	; 0x32
 800340a:	4a34      	ldr	r2, [pc, #208]	; (80034dc <UART_SetConfig+0x4e4>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003416:	441c      	add	r4, r3
 8003418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341c:	2200      	movs	r2, #0
 800341e:	673b      	str	r3, [r7, #112]	; 0x70
 8003420:	677a      	str	r2, [r7, #116]	; 0x74
 8003422:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003426:	4642      	mov	r2, r8
 8003428:	464b      	mov	r3, r9
 800342a:	1891      	adds	r1, r2, r2
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	415b      	adcs	r3, r3
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003436:	4641      	mov	r1, r8
 8003438:	1851      	adds	r1, r2, r1
 800343a:	6039      	str	r1, [r7, #0]
 800343c:	4649      	mov	r1, r9
 800343e:	414b      	adcs	r3, r1
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800344e:	4659      	mov	r1, fp
 8003450:	00cb      	lsls	r3, r1, #3
 8003452:	4651      	mov	r1, sl
 8003454:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003458:	4651      	mov	r1, sl
 800345a:	00ca      	lsls	r2, r1, #3
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	4603      	mov	r3, r0
 8003462:	4642      	mov	r2, r8
 8003464:	189b      	adds	r3, r3, r2
 8003466:	66bb      	str	r3, [r7, #104]	; 0x68
 8003468:	464b      	mov	r3, r9
 800346a:	460a      	mov	r2, r1
 800346c:	eb42 0303 	adc.w	r3, r2, r3
 8003470:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	663b      	str	r3, [r7, #96]	; 0x60
 800347c:	667a      	str	r2, [r7, #100]	; 0x64
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800348a:	4649      	mov	r1, r9
 800348c:	008b      	lsls	r3, r1, #2
 800348e:	4641      	mov	r1, r8
 8003490:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003494:	4641      	mov	r1, r8
 8003496:	008a      	lsls	r2, r1, #2
 8003498:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800349c:	f7fc fea6 	bl	80001ec <__aeabi_uldivmod>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <UART_SetConfig+0x4e4>)
 80034a6:	fba3 1302 	umull	r1, r3, r3, r2
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	2164      	movs	r1, #100	; 0x64
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	3332      	adds	r3, #50	; 0x32
 80034b8:	4a08      	ldr	r2, [pc, #32]	; (80034dc <UART_SetConfig+0x4e4>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	f003 020f 	and.w	r2, r3, #15
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4422      	add	r2, r4
 80034cc:	609a      	str	r2, [r3, #8]
}
 80034ce:	bf00      	nop
 80034d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034da:	bf00      	nop
 80034dc:	51eb851f 	.word	0x51eb851f

080034e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034e0:	b084      	sub	sp, #16
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	f107 001c 	add.w	r0, r7, #28
 80034ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d122      	bne.n	800353e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800350c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f001 fbee 	bl	8004d14 <USB_CoreReset>
 8003538:	4603      	mov	r3, r0
 800353a:	73fb      	strb	r3, [r7, #15]
 800353c:	e01a      	b.n	8003574 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f001 fbe2 	bl	8004d14 <USB_CoreReset>
 8003550:	4603      	mov	r3, r0
 8003552:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	639a      	str	r2, [r3, #56]	; 0x38
 8003566:	e005      	b.n	8003574 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	2b01      	cmp	r3, #1
 8003578:	d10b      	bne.n	8003592 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f043 0206 	orr.w	r2, r3, #6
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003592:	7bfb      	ldrb	r3, [r7, #15]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800359e:	b004      	add	sp, #16
 80035a0:	4770      	bx	lr
	...

080035a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	4613      	mov	r3, r2
 80035b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d165      	bne.n	8003684 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4a41      	ldr	r2, [pc, #260]	; (80036c0 <USB_SetTurnaroundTime+0x11c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d906      	bls.n	80035ce <USB_SetTurnaroundTime+0x2a>
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4a40      	ldr	r2, [pc, #256]	; (80036c4 <USB_SetTurnaroundTime+0x120>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d202      	bcs.n	80035ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80035c8:	230f      	movs	r3, #15
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	e062      	b.n	8003694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4a3c      	ldr	r2, [pc, #240]	; (80036c4 <USB_SetTurnaroundTime+0x120>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d306      	bcc.n	80035e4 <USB_SetTurnaroundTime+0x40>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4a3b      	ldr	r2, [pc, #236]	; (80036c8 <USB_SetTurnaroundTime+0x124>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d202      	bcs.n	80035e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035de:	230e      	movs	r3, #14
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	e057      	b.n	8003694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4a38      	ldr	r2, [pc, #224]	; (80036c8 <USB_SetTurnaroundTime+0x124>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d306      	bcc.n	80035fa <USB_SetTurnaroundTime+0x56>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4a37      	ldr	r2, [pc, #220]	; (80036cc <USB_SetTurnaroundTime+0x128>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d202      	bcs.n	80035fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035f4:	230d      	movs	r3, #13
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e04c      	b.n	8003694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4a33      	ldr	r2, [pc, #204]	; (80036cc <USB_SetTurnaroundTime+0x128>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d306      	bcc.n	8003610 <USB_SetTurnaroundTime+0x6c>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4a32      	ldr	r2, [pc, #200]	; (80036d0 <USB_SetTurnaroundTime+0x12c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d802      	bhi.n	8003610 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800360a:	230c      	movs	r3, #12
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	e041      	b.n	8003694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4a2f      	ldr	r2, [pc, #188]	; (80036d0 <USB_SetTurnaroundTime+0x12c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d906      	bls.n	8003626 <USB_SetTurnaroundTime+0x82>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4a2e      	ldr	r2, [pc, #184]	; (80036d4 <USB_SetTurnaroundTime+0x130>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d802      	bhi.n	8003626 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003620:	230b      	movs	r3, #11
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	e036      	b.n	8003694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4a2a      	ldr	r2, [pc, #168]	; (80036d4 <USB_SetTurnaroundTime+0x130>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d906      	bls.n	800363c <USB_SetTurnaroundTime+0x98>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4a29      	ldr	r2, [pc, #164]	; (80036d8 <USB_SetTurnaroundTime+0x134>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d802      	bhi.n	800363c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003636:	230a      	movs	r3, #10
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	e02b      	b.n	8003694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4a26      	ldr	r2, [pc, #152]	; (80036d8 <USB_SetTurnaroundTime+0x134>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d906      	bls.n	8003652 <USB_SetTurnaroundTime+0xae>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4a25      	ldr	r2, [pc, #148]	; (80036dc <USB_SetTurnaroundTime+0x138>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d202      	bcs.n	8003652 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800364c:	2309      	movs	r3, #9
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e020      	b.n	8003694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4a21      	ldr	r2, [pc, #132]	; (80036dc <USB_SetTurnaroundTime+0x138>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d306      	bcc.n	8003668 <USB_SetTurnaroundTime+0xc4>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4a20      	ldr	r2, [pc, #128]	; (80036e0 <USB_SetTurnaroundTime+0x13c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d802      	bhi.n	8003668 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003662:	2308      	movs	r3, #8
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	e015      	b.n	8003694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <USB_SetTurnaroundTime+0x13c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d906      	bls.n	800367e <USB_SetTurnaroundTime+0xda>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4a1c      	ldr	r2, [pc, #112]	; (80036e4 <USB_SetTurnaroundTime+0x140>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d202      	bcs.n	800367e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003678:	2307      	movs	r3, #7
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e00a      	b.n	8003694 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800367e:	2306      	movs	r3, #6
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	e007      	b.n	8003694 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800368a:	2309      	movs	r3, #9
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	e001      	b.n	8003694 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003690:	2309      	movs	r3, #9
 8003692:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	029b      	lsls	r3, r3, #10
 80036a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	371c      	adds	r7, #28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	00d8acbf 	.word	0x00d8acbf
 80036c4:	00e4e1c0 	.word	0x00e4e1c0
 80036c8:	00f42400 	.word	0x00f42400
 80036cc:	01067380 	.word	0x01067380
 80036d0:	011a499f 	.word	0x011a499f
 80036d4:	01312cff 	.word	0x01312cff
 80036d8:	014ca43f 	.word	0x014ca43f
 80036dc:	016e3600 	.word	0x016e3600
 80036e0:	01a6ab1f 	.word	0x01a6ab1f
 80036e4:	01e84800 	.word	0x01e84800

080036e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f043 0201 	orr.w	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 0201 	bic.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d115      	bne.n	800377a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800375a:	2001      	movs	r0, #1
 800375c:	f7fd f9d4 	bl	8000b08 <HAL_Delay>
      ms++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3301      	adds	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f001 fa45 	bl	8004bf6 <USB_GetMode>
 800376c:	4603      	mov	r3, r0
 800376e:	2b01      	cmp	r3, #1
 8003770:	d01e      	beq.n	80037b0 <USB_SetCurrentMode+0x84>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b31      	cmp	r3, #49	; 0x31
 8003776:	d9f0      	bls.n	800375a <USB_SetCurrentMode+0x2e>
 8003778:	e01a      	b.n	80037b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d115      	bne.n	80037ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800378c:	2001      	movs	r0, #1
 800378e:	f7fd f9bb 	bl	8000b08 <HAL_Delay>
      ms++;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3301      	adds	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f001 fa2c 	bl	8004bf6 <USB_GetMode>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <USB_SetCurrentMode+0x84>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b31      	cmp	r3, #49	; 0x31
 80037a8:	d9f0      	bls.n	800378c <USB_SetCurrentMode+0x60>
 80037aa:	e001      	b.n	80037b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e005      	b.n	80037bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b32      	cmp	r3, #50	; 0x32
 80037b4:	d101      	bne.n	80037ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037c4:	b084      	sub	sp, #16
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b086      	sub	sp, #24
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80037d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	e009      	b.n	80037f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	3340      	adds	r3, #64	; 0x40
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	2200      	movs	r2, #0
 80037f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	3301      	adds	r3, #1
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b0e      	cmp	r3, #14
 80037fc:	d9f2      	bls.n	80037e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d11c      	bne.n	800383e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003812:	f043 0302 	orr.w	r3, r3, #2
 8003816:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
 800383c:	e00b      	b.n	8003856 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800385c:	461a      	mov	r2, r3
 800385e:	2300      	movs	r3, #0
 8003860:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003868:	4619      	mov	r1, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003870:	461a      	mov	r2, r3
 8003872:	680b      	ldr	r3, [r1, #0]
 8003874:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	2b01      	cmp	r3, #1
 800387a:	d10c      	bne.n	8003896 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003882:	2100      	movs	r1, #0
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f965 	bl	8003b54 <USB_SetDevSpeed>
 800388a:	e008      	b.n	800389e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800388c:	2101      	movs	r1, #1
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f960 	bl	8003b54 <USB_SetDevSpeed>
 8003894:	e003      	b.n	800389e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003896:	2103      	movs	r1, #3
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f95b 	bl	8003b54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800389e:	2110      	movs	r1, #16
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f8f3 	bl	8003a8c <USB_FlushTxFifo>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f91f 	bl	8003af4 <USB_FlushRxFifo>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c6:	461a      	mov	r2, r3
 80038c8:	2300      	movs	r3, #0
 80038ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d2:	461a      	mov	r2, r3
 80038d4:	2300      	movs	r3, #0
 80038d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038de:	461a      	mov	r2, r3
 80038e0:	2300      	movs	r3, #0
 80038e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038e4:	2300      	movs	r3, #0
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	e043      	b.n	8003972 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003900:	d118      	bne.n	8003934 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003914:	461a      	mov	r2, r3
 8003916:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	e013      	b.n	8003946 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392a:	461a      	mov	r2, r3
 800392c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e008      	b.n	8003946 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003940:	461a      	mov	r2, r3
 8003942:	2300      	movs	r3, #0
 8003944:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003952:	461a      	mov	r2, r3
 8003954:	2300      	movs	r3, #0
 8003956:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003964:	461a      	mov	r2, r3
 8003966:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800396a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	3301      	adds	r3, #1
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	429a      	cmp	r2, r3
 8003978:	d3b7      	bcc.n	80038ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	e043      	b.n	8003a08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003996:	d118      	bne.n	80039ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039aa:	461a      	mov	r2, r3
 80039ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e013      	b.n	80039dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c0:	461a      	mov	r2, r3
 80039c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	e008      	b.n	80039dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d6:	461a      	mov	r2, r3
 80039d8:	2300      	movs	r3, #0
 80039da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e8:	461a      	mov	r2, r3
 80039ea:	2300      	movs	r3, #0
 80039ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fa:	461a      	mov	r2, r3
 80039fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	3301      	adds	r3, #1
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d3b7      	bcc.n	8003980 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f043 0210 	orr.w	r2, r3, #16
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <USB_DevInit+0x2c4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f043 0208 	orr.w	r2, r3, #8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d107      	bne.n	8003a78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a84:	b004      	add	sp, #16
 8003a86:	4770      	bx	lr
 8003a88:	803c3800 	.word	0x803c3800

08003a8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <USB_FlushTxFifo+0x64>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e01b      	b.n	8003ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	daf2      	bge.n	8003a9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	019b      	lsls	r3, r3, #6
 8003abc:	f043 0220 	orr.w	r2, r3, #32
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a08      	ldr	r2, [pc, #32]	; (8003af0 <USB_FlushTxFifo+0x64>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e006      	b.n	8003ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d0f0      	beq.n	8003ac4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	00030d40 	.word	0x00030d40

08003af4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3301      	adds	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a11      	ldr	r2, [pc, #68]	; (8003b50 <USB_FlushRxFifo+0x5c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e018      	b.n	8003b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	daf2      	bge.n	8003b00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2210      	movs	r2, #16
 8003b22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3301      	adds	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a08      	ldr	r2, [pc, #32]	; (8003b50 <USB_FlushRxFifo+0x5c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e006      	b.n	8003b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0310 	and.w	r3, r3, #16
 8003b3e:	2b10      	cmp	r3, #16
 8003b40:	d0f0      	beq.n	8003b24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	00030d40 	.word	0x00030d40

08003b54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	68f9      	ldr	r1, [r7, #12]
 8003b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b74:	4313      	orrs	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b087      	sub	sp, #28
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 0306 	and.w	r3, r3, #6
 8003b9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	75fb      	strb	r3, [r7, #23]
 8003baa:	e00a      	b.n	8003bc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d002      	beq.n	8003bb8 <USB_GetDevSpeed+0x32>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b06      	cmp	r3, #6
 8003bb6:	d102      	bne.n	8003bbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	75fb      	strb	r3, [r7, #23]
 8003bbc:	e001      	b.n	8003bc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003bbe:	230f      	movs	r3, #15
 8003bc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d13a      	bne.n	8003c62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	68f9      	ldr	r1, [r7, #12]
 8003c06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d155      	bne.n	8003cd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	791b      	ldrb	r3, [r3, #4]
 8003c3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	059b      	lsls	r3, r3, #22
 8003c46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	0151      	lsls	r1, r2, #5
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	440a      	add	r2, r1
 8003c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	e036      	b.n	8003cd0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	2101      	movs	r1, #1
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	041b      	lsls	r3, r3, #16
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c80:	4313      	orrs	r3, r2
 8003c82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d11a      	bne.n	8003cd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	791b      	ldrb	r3, [r3, #4]
 8003cb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	0151      	lsls	r1, r2, #5
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	440a      	add	r2, r1
 8003cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d161      	bne.n	8003dc0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d12:	d11f      	bne.n	8003d54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	0151      	lsls	r1, r2, #5
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	440a      	add	r2, r1
 8003d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	0151      	lsls	r1, r2, #5
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	440a      	add	r2, r1
 8003d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	2101      	movs	r1, #1
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	68f9      	ldr	r1, [r7, #12]
 8003d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d74:	4013      	ands	r3, r2
 8003d76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	2101      	movs	r1, #1
 8003d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	68f9      	ldr	r1, [r7, #12]
 8003d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	0159      	lsls	r1, r3, #5
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	440b      	add	r3, r1
 8003db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db6:	4619      	mov	r1, r3
 8003db8:	4b35      	ldr	r3, [pc, #212]	; (8003e90 <USB_DeactivateEndpoint+0x1b0>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]
 8003dbe:	e060      	b.n	8003e82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dd6:	d11f      	bne.n	8003e18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003df6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	f003 030f 	and.w	r3, r3, #15
 8003e28:	2101      	movs	r1, #1
 8003e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	43db      	mvns	r3, r3
 8003e32:	68f9      	ldr	r1, [r7, #12]
 8003e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e38:	4013      	ands	r3, r2
 8003e3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e42:	69da      	ldr	r2, [r3, #28]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e52:	041b      	lsls	r3, r3, #16
 8003e54:	43db      	mvns	r3, r3
 8003e56:	68f9      	ldr	r1, [r7, #12]
 8003e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	0159      	lsls	r1, r3, #5
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	440b      	add	r3, r1
 8003e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <USB_DeactivateEndpoint+0x1b4>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	ec337800 	.word	0xec337800
 8003e94:	eff37800 	.word	0xeff37800

08003e98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	f040 815c 	bne.w	8004172 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d132      	bne.n	8003f28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003edc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ee0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ee4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	0151      	lsls	r1, r2, #5
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f20:	0cdb      	lsrs	r3, r3, #19
 8003f22:	04db      	lsls	r3, r3, #19
 8003f24:	6113      	str	r3, [r2, #16]
 8003f26:	e074      	b.n	8004012 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	0151      	lsls	r1, r2, #5
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	440a      	add	r2, r1
 8003f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f42:	0cdb      	lsrs	r3, r3, #19
 8003f44:	04db      	lsls	r3, r3, #19
 8003f46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	0151      	lsls	r1, r2, #5
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	440a      	add	r2, r1
 8003f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f78:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6999      	ldr	r1, [r3, #24]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	440b      	add	r3, r1
 8003f84:	1e59      	subs	r1, r3, #1
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f8e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f90:	4b9d      	ldr	r3, [pc, #628]	; (8004208 <USB_EPStartXfer+0x370>)
 8003f92:	400b      	ands	r3, r1
 8003f94:	69b9      	ldr	r1, [r7, #24]
 8003f96:	0148      	lsls	r0, r1, #5
 8003f98:	69f9      	ldr	r1, [r7, #28]
 8003f9a:	4401      	add	r1, r0
 8003f9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fba:	69b9      	ldr	r1, [r7, #24]
 8003fbc:	0148      	lsls	r0, r1, #5
 8003fbe:	69f9      	ldr	r1, [r7, #28]
 8003fc0:	4401      	add	r1, r0
 8003fc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	791b      	ldrb	r3, [r3, #4]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d11f      	bne.n	8004012 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	0151      	lsls	r1, r2, #5
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	440a      	add	r2, r1
 8003fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ff0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	0151      	lsls	r1, r2, #5
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	440a      	add	r2, r1
 8004008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800400c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004010:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d14b      	bne.n	80040b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d009      	beq.n	8004034 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	461a      	mov	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	791b      	ldrb	r3, [r3, #4]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d128      	bne.n	800408e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d110      	bne.n	800406e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	0151      	lsls	r1, r2, #5
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	440a      	add	r2, r1
 8004062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004066:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e00f      	b.n	800408e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	0151      	lsls	r1, r2, #5
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	440a      	add	r2, r1
 8004084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	0151      	lsls	r1, r2, #5
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	440a      	add	r2, r1
 80040a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e133      	b.n	8004318 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	0151      	lsls	r1, r2, #5
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	440a      	add	r2, r1
 80040c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	791b      	ldrb	r3, [r3, #4]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d015      	beq.n	8004104 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 811b 	beq.w	8004318 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	2101      	movs	r1, #1
 80040f4:	fa01 f303 	lsl.w	r3, r1, r3
 80040f8:	69f9      	ldr	r1, [r7, #28]
 80040fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040fe:	4313      	orrs	r3, r2
 8004100:	634b      	str	r3, [r1, #52]	; 0x34
 8004102:	e109      	b.n	8004318 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d110      	bne.n	8004136 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	0151      	lsls	r1, r2, #5
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	440a      	add	r2, r1
 800412a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	e00f      	b.n	8004156 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	0151      	lsls	r1, r2, #5
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	440a      	add	r2, r1
 800414c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004154:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	6919      	ldr	r1, [r3, #16]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	b298      	uxth	r0, r3
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	4603      	mov	r3, r0
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fade 	bl	800472c <USB_WritePacket>
 8004170:	e0d2      	b.n	8004318 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	440a      	add	r2, r1
 8004188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418c:	0cdb      	lsrs	r3, r3, #19
 800418e:	04db      	lsls	r3, r3, #19
 8004190:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	0151      	lsls	r1, r2, #5
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	440a      	add	r2, r1
 80041a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d126      	bne.n	800420c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d4:	69b9      	ldr	r1, [r7, #24]
 80041d6:	0148      	lsls	r0, r1, #5
 80041d8:	69f9      	ldr	r1, [r7, #28]
 80041da:	4401      	add	r1, r0
 80041dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041e0:	4313      	orrs	r3, r2
 80041e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	0151      	lsls	r1, r2, #5
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	440a      	add	r2, r1
 80041fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004202:	6113      	str	r3, [r2, #16]
 8004204:	e03a      	b.n	800427c <USB_EPStartXfer+0x3e4>
 8004206:	bf00      	nop
 8004208:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4413      	add	r3, r2
 8004216:	1e5a      	subs	r2, r3, #1
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	8afa      	ldrh	r2, [r7, #22]
 8004228:	fb03 f202 	mul.w	r2, r3, r2
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	8afb      	ldrh	r3, [r7, #22]
 8004240:	04d9      	lsls	r1, r3, #19
 8004242:	4b38      	ldr	r3, [pc, #224]	; (8004324 <USB_EPStartXfer+0x48c>)
 8004244:	400b      	ands	r3, r1
 8004246:	69b9      	ldr	r1, [r7, #24]
 8004248:	0148      	lsls	r0, r1, #5
 800424a:	69f9      	ldr	r1, [r7, #28]
 800424c:	4401      	add	r1, r0
 800424e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004252:	4313      	orrs	r3, r2
 8004254:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426c:	69b9      	ldr	r1, [r7, #24]
 800426e:	0148      	lsls	r0, r1, #5
 8004270:	69f9      	ldr	r1, [r7, #28]
 8004272:	4401      	add	r1, r0
 8004274:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004278:	4313      	orrs	r3, r2
 800427a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d10d      	bne.n	800429e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	6919      	ldr	r1, [r3, #16]
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429a:	460a      	mov	r2, r1
 800429c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	791b      	ldrb	r3, [r3, #4]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d128      	bne.n	80042f8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d110      	bne.n	80042d8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	0151      	lsls	r1, r2, #5
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	440a      	add	r2, r1
 80042cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e00f      	b.n	80042f8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	0151      	lsls	r1, r2, #5
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	440a      	add	r2, r1
 80042ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	0151      	lsls	r1, r2, #5
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	440a      	add	r2, r1
 800430e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004312:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004316:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3720      	adds	r7, #32
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	1ff80000 	.word	0x1ff80000

08004328 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	4613      	mov	r3, r2
 8004334:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	785b      	ldrb	r3, [r3, #1]
 8004344:	2b01      	cmp	r3, #1
 8004346:	f040 80ce 	bne.w	80044e6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d132      	bne.n	80043b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	0151      	lsls	r1, r2, #5
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	440a      	add	r2, r1
 8004368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800436c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004370:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004374:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004390:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004394:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b0:	0cdb      	lsrs	r3, r3, #19
 80043b2:	04db      	lsls	r3, r3, #19
 80043b4:	6113      	str	r3, [r2, #16]
 80043b6:	e04e      	b.n	8004456 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d2:	0cdb      	lsrs	r3, r3, #19
 80043d4:	04db      	lsls	r3, r3, #19
 80043d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	429a      	cmp	r2, r3
 8004406:	d903      	bls.n	8004410 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800442e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004446:	6939      	ldr	r1, [r7, #16]
 8004448:	0148      	lsls	r0, r1, #5
 800444a:	6979      	ldr	r1, [r7, #20]
 800444c:	4401      	add	r1, r0
 800444e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004452:	4313      	orrs	r3, r2
 8004454:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d11e      	bne.n	800449a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d009      	beq.n	8004478 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004470:	461a      	mov	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	440a      	add	r2, r1
 800448e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004492:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	e097      	b.n	80045ca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	0151      	lsls	r1, r2, #5
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	440a      	add	r2, r1
 80044b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 8083 	beq.w	80045ca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	2101      	movs	r1, #1
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	6979      	ldr	r1, [r7, #20]
 80044dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e0:	4313      	orrs	r3, r2
 80044e2:	634b      	str	r3, [r1, #52]	; 0x34
 80044e4:	e071      	b.n	80045ca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004500:	0cdb      	lsrs	r3, r3, #19
 8004502:	04db      	lsls	r3, r3, #19
 8004504:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	0151      	lsls	r1, r2, #5
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	440a      	add	r2, r1
 800451c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004520:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004524:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004528:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	0151      	lsls	r1, r2, #5
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	440a      	add	r2, r1
 8004558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800455c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004560:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004578:	6939      	ldr	r1, [r7, #16]
 800457a:	0148      	lsls	r0, r1, #5
 800457c:	6979      	ldr	r1, [r7, #20]
 800457e:	4401      	add	r1, r0
 8004580:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004584:	4313      	orrs	r3, r2
 8004586:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d10d      	bne.n	80045aa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	6919      	ldr	r1, [r3, #16]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	460a      	mov	r2, r1
 80045a8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	0151      	lsls	r1, r2, #5
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	440a      	add	r2, r1
 80045c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	785b      	ldrb	r3, [r3, #1]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d14a      	bne.n	800468c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800460a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800460e:	f040 8086 	bne.w	800471e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	7812      	ldrb	r2, [r2, #0]
 8004626:	0151      	lsls	r1, r2, #5
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	440a      	add	r2, r1
 800462c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004630:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004634:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	7812      	ldrb	r2, [r2, #0]
 800464a:	0151      	lsls	r1, r2, #5
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	440a      	add	r2, r1
 8004650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004658:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3301      	adds	r3, #1
 800465e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f242 7210 	movw	r2, #10000	; 0x2710
 8004666:	4293      	cmp	r3, r2
 8004668:	d902      	bls.n	8004670 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	75fb      	strb	r3, [r7, #23]
          break;
 800466e:	e056      	b.n	800471e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004688:	d0e7      	beq.n	800465a <USB_EPStopXfer+0x82>
 800468a:	e048      	b.n	800471e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a4:	d13b      	bne.n	800471e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	7812      	ldrb	r2, [r2, #0]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	7812      	ldrb	r2, [r2, #0]
 80046de:	0151      	lsls	r1, r2, #5
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	440a      	add	r2, r1
 80046e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3301      	adds	r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d902      	bls.n	8004704 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]
          break;
 8004702:	e00c      	b.n	800471e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800471c:	d0e7      	beq.n	80046ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800471e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004720:	4618      	mov	r0, r3
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800472c:	b480      	push	{r7}
 800472e:	b089      	sub	sp, #36	; 0x24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	4611      	mov	r1, r2
 8004738:	461a      	mov	r2, r3
 800473a:	460b      	mov	r3, r1
 800473c:	71fb      	strb	r3, [r7, #7]
 800473e:	4613      	mov	r3, r2
 8004740:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800474a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800474e:	2b00      	cmp	r3, #0
 8004750:	d123      	bne.n	800479a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004752:	88bb      	ldrh	r3, [r7, #4]
 8004754:	3303      	adds	r3, #3
 8004756:	089b      	lsrs	r3, r3, #2
 8004758:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	e018      	b.n	8004792 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	031a      	lsls	r2, r3, #12
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4413      	add	r3, r2
 8004768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476c:	461a      	mov	r2, r3
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	3301      	adds	r3, #1
 8004778:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3301      	adds	r3, #1
 800477e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	3301      	adds	r3, #1
 8004784:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3301      	adds	r3, #1
 800478a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	3301      	adds	r3, #1
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	429a      	cmp	r2, r3
 8004798:	d3e2      	bcc.n	8004760 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3724      	adds	r7, #36	; 0x24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b08b      	sub	sp, #44	; 0x2c
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	089b      	lsrs	r3, r3, #2
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047ce:	2300      	movs	r3, #0
 80047d0:	623b      	str	r3, [r7, #32]
 80047d2:	e014      	b.n	80047fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	601a      	str	r2, [r3, #0]
    pDest++;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	3301      	adds	r3, #1
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	3301      	adds	r3, #1
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	3301      	adds	r3, #1
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	3301      	adds	r3, #1
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	3301      	adds	r3, #1
 80047fc:	623b      	str	r3, [r7, #32]
 80047fe:	6a3a      	ldr	r2, [r7, #32]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	429a      	cmp	r2, r3
 8004804:	d3e6      	bcc.n	80047d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004806:	8bfb      	ldrh	r3, [r7, #30]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01e      	beq.n	800484a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004816:	461a      	mov	r2, r3
 8004818:	f107 0310 	add.w	r3, r7, #16
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
 800482c:	b2da      	uxtb	r2, r3
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	701a      	strb	r2, [r3, #0]
      i++;
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	3301      	adds	r3, #1
 8004836:	623b      	str	r3, [r7, #32]
      pDest++;
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	3301      	adds	r3, #1
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800483e:	8bfb      	ldrh	r3, [r7, #30]
 8004840:	3b01      	subs	r3, #1
 8004842:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004844:	8bfb      	ldrh	r3, [r7, #30]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1ea      	bne.n	8004820 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800484c:	4618      	mov	r0, r3
 800484e:	372c      	adds	r7, #44	; 0x2c
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d12c      	bne.n	80048ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	db12      	blt.n	80048ac <USB_EPSetStall+0x54>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00f      	beq.n	80048ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	0151      	lsls	r1, r2, #5
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	440a      	add	r2, r1
 80048a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	0151      	lsls	r1, r2, #5
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	440a      	add	r2, r1
 80048c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	e02b      	b.n	8004926 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	db12      	blt.n	8004906 <USB_EPSetStall+0xae>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00f      	beq.n	8004906 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	0151      	lsls	r1, r2, #5
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	440a      	add	r2, r1
 80048fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004900:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004904:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	440a      	add	r2, r1
 800491c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004920:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004924:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	785b      	ldrb	r3, [r3, #1]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d128      	bne.n	80049a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	0151      	lsls	r1, r2, #5
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	440a      	add	r2, r1
 8004966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800496e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	791b      	ldrb	r3, [r3, #4]
 8004974:	2b03      	cmp	r3, #3
 8004976:	d003      	beq.n	8004980 <USB_EPClearStall+0x4c>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	791b      	ldrb	r3, [r3, #4]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d138      	bne.n	80049f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	440a      	add	r2, r1
 8004996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	e027      	b.n	80049f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	791b      	ldrb	r3, [r3, #4]
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d003      	beq.n	80049d2 <USB_EPClearStall+0x9e>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	791b      	ldrb	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d10f      	bne.n	80049f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004a34:	68f9      	ldr	r1, [r7, #12]
 8004a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a66:	f023 0303 	bic.w	r3, r3, #3
 8004a6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a7a:	f023 0302 	bic.w	r3, r3, #2
 8004a7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004aa8:	f023 0303 	bic.w	r3, r3, #3
 8004aac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004abc:	f043 0302 	orr.w	r3, r3, #2
 8004ac0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b085      	sub	sp, #20
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	4013      	ands	r3, r2
 8004b18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	b29b      	uxth	r3, r3
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b087      	sub	sp, #28
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bca:	01db      	lsls	r3, r3, #7
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4013      	ands	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004be8:	68bb      	ldr	r3, [r7, #8]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	f003 0301 	and.w	r3, r3, #1
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b085      	sub	sp, #20
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c30:	f023 0307 	bic.w	r3, r3, #7
 8004c34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	460b      	mov	r3, r1
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	333c      	adds	r3, #60	; 0x3c
 8004c6e:	3304      	adds	r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4a26      	ldr	r2, [pc, #152]	; (8004d10 <USB_EP0_OutStart+0xb8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d90a      	bls.n	8004c92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c8c:	d101      	bne.n	8004c92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e037      	b.n	8004d02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c98:	461a      	mov	r2, r3
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc0:	f043 0318 	orr.w	r3, r3, #24
 8004cc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004cd8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004cda:	7afb      	ldrb	r3, [r7, #11]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d10f      	bne.n	8004d00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cfa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004cfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	4f54300a 	.word	0x4f54300a

08004d14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3301      	adds	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <USB_CoreReset+0x64>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e01b      	b.n	8004d6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	daf2      	bge.n	8004d20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f043 0201 	orr.w	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <USB_CoreReset+0x64>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d901      	bls.n	8004d5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e006      	b.n	8004d6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d0f0      	beq.n	8004d4a <USB_CoreReset+0x36>

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	00030d40 	.word	0x00030d40

08004d7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d8c:	f002 fc94 	bl	80076b8 <USBD_static_malloc>
 8004d90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	32b0      	adds	r2, #176	; 0xb0
 8004da2:	2100      	movs	r1, #0
 8004da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004da8:	2302      	movs	r3, #2
 8004daa:	e0d4      	b.n	8004f56 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004dac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004db0:	2100      	movs	r1, #0
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f002 fce8 	bl	8007788 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	32b0      	adds	r2, #176	; 0xb0
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	32b0      	adds	r2, #176	; 0xb0
 8004dd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	7c1b      	ldrb	r3, [r3, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d138      	bne.n	8004e56 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004de4:	4b5e      	ldr	r3, [pc, #376]	; (8004f60 <USBD_CDC_Init+0x1e4>)
 8004de6:	7819      	ldrb	r1, [r3, #0]
 8004de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dec:	2202      	movs	r2, #2
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f002 fb3f 	bl	8007472 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004df4:	4b5a      	ldr	r3, [pc, #360]	; (8004f60 <USBD_CDC_Init+0x1e4>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	f003 020f 	and.w	r2, r3, #15
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	3324      	adds	r3, #36	; 0x24
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004e0e:	4b55      	ldr	r3, [pc, #340]	; (8004f64 <USBD_CDC_Init+0x1e8>)
 8004e10:	7819      	ldrb	r1, [r3, #0]
 8004e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e16:	2202      	movs	r2, #2
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f002 fb2a 	bl	8007472 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e1e:	4b51      	ldr	r3, [pc, #324]	; (8004f64 <USBD_CDC_Init+0x1e8>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	f003 020f 	and.w	r2, r3, #15
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e36:	2201      	movs	r2, #1
 8004e38:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004e3a:	4b4b      	ldr	r3, [pc, #300]	; (8004f68 <USBD_CDC_Init+0x1ec>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	f003 020f 	and.w	r2, r3, #15
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	3326      	adds	r3, #38	; 0x26
 8004e50:	2210      	movs	r2, #16
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	e035      	b.n	8004ec2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e56:	4b42      	ldr	r3, [pc, #264]	; (8004f60 <USBD_CDC_Init+0x1e4>)
 8004e58:	7819      	ldrb	r1, [r3, #0]
 8004e5a:	2340      	movs	r3, #64	; 0x40
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f002 fb07 	bl	8007472 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004e64:	4b3e      	ldr	r3, [pc, #248]	; (8004f60 <USBD_CDC_Init+0x1e4>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f003 020f 	and.w	r2, r3, #15
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	3324      	adds	r3, #36	; 0x24
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004e7e:	4b39      	ldr	r3, [pc, #228]	; (8004f64 <USBD_CDC_Init+0x1e8>)
 8004e80:	7819      	ldrb	r1, [r3, #0]
 8004e82:	2340      	movs	r3, #64	; 0x40
 8004e84:	2202      	movs	r2, #2
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f002 faf3 	bl	8007472 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e8c:	4b35      	ldr	r3, [pc, #212]	; (8004f64 <USBD_CDC_Init+0x1e8>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f003 020f 	and.w	r2, r3, #15
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004ea8:	4b2f      	ldr	r3, [pc, #188]	; (8004f68 <USBD_CDC_Init+0x1ec>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	f003 020f 	and.w	r2, r3, #15
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	3326      	adds	r3, #38	; 0x26
 8004ebe:	2210      	movs	r2, #16
 8004ec0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ec2:	4b29      	ldr	r3, [pc, #164]	; (8004f68 <USBD_CDC_Init+0x1ec>)
 8004ec4:	7819      	ldrb	r1, [r3, #0]
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	2203      	movs	r2, #3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f002 fad1 	bl	8007472 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004ed0:	4b25      	ldr	r3, [pc, #148]	; (8004f68 <USBD_CDC_Init+0x1ec>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	f003 020f 	and.w	r2, r3, #15
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	3324      	adds	r3, #36	; 0x24
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	33b0      	adds	r3, #176	; 0xb0
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004f20:	2302      	movs	r3, #2
 8004f22:	e018      	b.n	8004f56 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	7c1b      	ldrb	r3, [r3, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f2c:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <USBD_CDC_Init+0x1e8>)
 8004f2e:	7819      	ldrb	r1, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f002 fb88 	bl	8007650 <USBD_LL_PrepareReceive>
 8004f40:	e008      	b.n	8004f54 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <USBD_CDC_Init+0x1e8>)
 8004f44:	7819      	ldrb	r1, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f4c:	2340      	movs	r3, #64	; 0x40
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f002 fb7e 	bl	8007650 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20000093 	.word	0x20000093
 8004f64:	20000094 	.word	0x20000094
 8004f68:	20000095 	.word	0x20000095

08004f6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004f78:	4b3a      	ldr	r3, [pc, #232]	; (8005064 <USBD_CDC_DeInit+0xf8>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f002 fa9d 	bl	80074be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004f84:	4b37      	ldr	r3, [pc, #220]	; (8005064 <USBD_CDC_DeInit+0xf8>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	f003 020f 	and.w	r2, r3, #15
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	3324      	adds	r3, #36	; 0x24
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004f9e:	4b32      	ldr	r3, [pc, #200]	; (8005068 <USBD_CDC_DeInit+0xfc>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f002 fa8a 	bl	80074be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004faa:	4b2f      	ldr	r3, [pc, #188]	; (8005068 <USBD_CDC_DeInit+0xfc>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	f003 020f 	and.w	r2, r3, #15
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004fc6:	4b29      	ldr	r3, [pc, #164]	; (800506c <USBD_CDC_DeInit+0x100>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f002 fa76 	bl	80074be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004fd2:	4b26      	ldr	r3, [pc, #152]	; (800506c <USBD_CDC_DeInit+0x100>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	f003 020f 	and.w	r2, r3, #15
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3324      	adds	r3, #36	; 0x24
 8004fe8:	2200      	movs	r2, #0
 8004fea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004fec:	4b1f      	ldr	r3, [pc, #124]	; (800506c <USBD_CDC_DeInit+0x100>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	f003 020f 	and.w	r2, r3, #15
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	3326      	adds	r3, #38	; 0x26
 8005002:	2200      	movs	r2, #0
 8005004:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	32b0      	adds	r2, #176	; 0xb0
 8005010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01f      	beq.n	8005058 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	33b0      	adds	r3, #176	; 0xb0
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	32b0      	adds	r2, #176	; 0xb0
 8005036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503a:	4618      	mov	r0, r3
 800503c:	f002 fb4a 	bl	80076d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	32b0      	adds	r2, #176	; 0xb0
 800504a:	2100      	movs	r1, #0
 800504c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000093 	.word	0x20000093
 8005068:	20000094 	.word	0x20000094
 800506c:	20000095 	.word	0x20000095

08005070 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	32b0      	adds	r2, #176	; 0xb0
 8005084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005088:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800509c:	2303      	movs	r3, #3
 800509e:	e0bf      	b.n	8005220 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d050      	beq.n	800514e <USBD_CDC_Setup+0xde>
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	f040 80af 	bne.w	8005210 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	88db      	ldrh	r3, [r3, #6]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d03a      	beq.n	8005130 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b25b      	sxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	da1b      	bge.n	80050fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	33b0      	adds	r3, #176	; 0xb0
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80050da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	88d2      	ldrh	r2, [r2, #6]
 80050e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	88db      	ldrh	r3, [r3, #6]
 80050e6:	2b07      	cmp	r3, #7
 80050e8:	bf28      	it	cs
 80050ea:	2307      	movcs	r3, #7
 80050ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	89fa      	ldrh	r2, [r7, #14]
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f001 fd89 	bl	8006c0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80050fa:	e090      	b.n	800521e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	785a      	ldrb	r2, [r3, #1]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	88db      	ldrh	r3, [r3, #6]
 800510a:	2b3f      	cmp	r3, #63	; 0x3f
 800510c:	d803      	bhi.n	8005116 <USBD_CDC_Setup+0xa6>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	88db      	ldrh	r3, [r3, #6]
 8005112:	b2da      	uxtb	r2, r3
 8005114:	e000      	b.n	8005118 <USBD_CDC_Setup+0xa8>
 8005116:	2240      	movs	r2, #64	; 0x40
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800511e:	6939      	ldr	r1, [r7, #16]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005126:	461a      	mov	r2, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f001 fd9b 	bl	8006c64 <USBD_CtlPrepareRx>
      break;
 800512e:	e076      	b.n	800521e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	33b0      	adds	r3, #176	; 0xb0
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	7850      	ldrb	r0, [r2, #1]
 8005146:	2200      	movs	r2, #0
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	4798      	blx	r3
      break;
 800514c:	e067      	b.n	800521e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	785b      	ldrb	r3, [r3, #1]
 8005152:	2b0b      	cmp	r3, #11
 8005154:	d851      	bhi.n	80051fa <USBD_CDC_Setup+0x18a>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <USBD_CDC_Setup+0xec>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	0800518d 	.word	0x0800518d
 8005160:	08005209 	.word	0x08005209
 8005164:	080051fb 	.word	0x080051fb
 8005168:	080051fb 	.word	0x080051fb
 800516c:	080051fb 	.word	0x080051fb
 8005170:	080051fb 	.word	0x080051fb
 8005174:	080051fb 	.word	0x080051fb
 8005178:	080051fb 	.word	0x080051fb
 800517c:	080051fb 	.word	0x080051fb
 8005180:	080051fb 	.word	0x080051fb
 8005184:	080051b7 	.word	0x080051b7
 8005188:	080051e1 	.word	0x080051e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b03      	cmp	r3, #3
 8005196:	d107      	bne.n	80051a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005198:	f107 030a 	add.w	r3, r7, #10
 800519c:	2202      	movs	r2, #2
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f001 fd33 	bl	8006c0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051a6:	e032      	b.n	800520e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80051a8:	6839      	ldr	r1, [r7, #0]
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f001 fcbd 	bl	8006b2a <USBD_CtlError>
            ret = USBD_FAIL;
 80051b0:	2303      	movs	r3, #3
 80051b2:	75fb      	strb	r3, [r7, #23]
          break;
 80051b4:	e02b      	b.n	800520e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d107      	bne.n	80051d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80051c2:	f107 030d 	add.w	r3, r7, #13
 80051c6:	2201      	movs	r2, #1
 80051c8:	4619      	mov	r1, r3
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f001 fd1e 	bl	8006c0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051d0:	e01d      	b.n	800520e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80051d2:	6839      	ldr	r1, [r7, #0]
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f001 fca8 	bl	8006b2a <USBD_CtlError>
            ret = USBD_FAIL;
 80051da:	2303      	movs	r3, #3
 80051dc:	75fb      	strb	r3, [r7, #23]
          break;
 80051de:	e016      	b.n	800520e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d00f      	beq.n	800520c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f001 fc9b 	bl	8006b2a <USBD_CtlError>
            ret = USBD_FAIL;
 80051f4:	2303      	movs	r3, #3
 80051f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80051f8:	e008      	b.n	800520c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80051fa:	6839      	ldr	r1, [r7, #0]
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f001 fc94 	bl	8006b2a <USBD_CtlError>
          ret = USBD_FAIL;
 8005202:	2303      	movs	r3, #3
 8005204:	75fb      	strb	r3, [r7, #23]
          break;
 8005206:	e002      	b.n	800520e <USBD_CDC_Setup+0x19e>
          break;
 8005208:	bf00      	nop
 800520a:	e008      	b.n	800521e <USBD_CDC_Setup+0x1ae>
          break;
 800520c:	bf00      	nop
      }
      break;
 800520e:	e006      	b.n	800521e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f001 fc89 	bl	8006b2a <USBD_CtlError>
      ret = USBD_FAIL;
 8005218:	2303      	movs	r3, #3
 800521a:	75fb      	strb	r3, [r7, #23]
      break;
 800521c:	bf00      	nop
  }

  return (uint8_t)ret;
 800521e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800523a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	32b0      	adds	r2, #176	; 0xb0
 8005246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800524e:	2303      	movs	r3, #3
 8005250:	e065      	b.n	800531e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	32b0      	adds	r2, #176	; 0xb0
 800525c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005260:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	f003 020f 	and.w	r2, r3, #15
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	3318      	adds	r3, #24
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d02f      	beq.n	80052dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	f003 020f 	and.w	r2, r3, #15
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	440b      	add	r3, r1
 800528e:	3318      	adds	r3, #24
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	78fb      	ldrb	r3, [r7, #3]
 8005294:	f003 010f 	and.w	r1, r3, #15
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	460b      	mov	r3, r1
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	440b      	add	r3, r1
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4403      	add	r3, r0
 80052a4:	3348      	adds	r3, #72	; 0x48
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d112      	bne.n	80052dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	f003 020f 	and.w	r2, r3, #15
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	4613      	mov	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	440b      	add	r3, r1
 80052c8:	3318      	adds	r3, #24
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80052ce:	78f9      	ldrb	r1, [r7, #3]
 80052d0:	2300      	movs	r3, #0
 80052d2:	2200      	movs	r2, #0
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f002 f99a 	bl	800760e <USBD_LL_Transmit>
 80052da:	e01f      	b.n	800531c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	33b0      	adds	r3, #176	; 0xb0
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d010      	beq.n	800531c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	33b0      	adds	r3, #176	; 0xb0
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	460b      	mov	r3, r1
 8005330:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	32b0      	adds	r2, #176	; 0xb0
 800533c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005340:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	32b0      	adds	r2, #176	; 0xb0
 800534c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005354:	2303      	movs	r3, #3
 8005356:	e01a      	b.n	800538e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f002 f998 	bl	8007692 <USBD_LL_GetRxDataSize>
 8005362:	4602      	mov	r2, r0
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	33b0      	adds	r3, #176	; 0xb0
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005388:	4611      	mov	r1, r2
 800538a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	32b0      	adds	r2, #176	; 0xb0
 80053a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e025      	b.n	8005404 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	33b0      	adds	r3, #176	; 0xb0
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01a      	beq.n	8005402 <USBD_CDC_EP0_RxReady+0x6c>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80053d2:	2bff      	cmp	r3, #255	; 0xff
 80053d4:	d015      	beq.n	8005402 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	33b0      	adds	r3, #176	; 0xb0
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80053ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80053f6:	b292      	uxth	r2, r2
 80053f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	22ff      	movs	r2, #255	; 0xff
 80053fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005414:	2182      	movs	r1, #130	; 0x82
 8005416:	4818      	ldr	r0, [pc, #96]	; (8005478 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005418:	f000 fd4f 	bl	8005eba <USBD_GetEpDesc>
 800541c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800541e:	2101      	movs	r1, #1
 8005420:	4815      	ldr	r0, [pc, #84]	; (8005478 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005422:	f000 fd4a 	bl	8005eba <USBD_GetEpDesc>
 8005426:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005428:	2181      	movs	r1, #129	; 0x81
 800542a:	4813      	ldr	r0, [pc, #76]	; (8005478 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800542c:	f000 fd45 	bl	8005eba <USBD_GetEpDesc>
 8005430:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2210      	movs	r2, #16
 800543c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2200      	movs	r2, #0
 8005448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800544c:	711a      	strb	r2, [r3, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d006      	beq.n	8005466 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005460:	711a      	strb	r2, [r3, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2243      	movs	r2, #67	; 0x43
 800546a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800546c:	4b02      	ldr	r3, [pc, #8]	; (8005478 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000050 	.word	0x20000050

0800547c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005484:	2182      	movs	r1, #130	; 0x82
 8005486:	4818      	ldr	r0, [pc, #96]	; (80054e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005488:	f000 fd17 	bl	8005eba <USBD_GetEpDesc>
 800548c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800548e:	2101      	movs	r1, #1
 8005490:	4815      	ldr	r0, [pc, #84]	; (80054e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005492:	f000 fd12 	bl	8005eba <USBD_GetEpDesc>
 8005496:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005498:	2181      	movs	r1, #129	; 0x81
 800549a:	4813      	ldr	r0, [pc, #76]	; (80054e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800549c:	f000 fd0d 	bl	8005eba <USBD_GetEpDesc>
 80054a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2210      	movs	r2, #16
 80054ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d006      	beq.n	80054c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2200      	movs	r2, #0
 80054b8:	711a      	strb	r2, [r3, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f042 0202 	orr.w	r2, r2, #2
 80054c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d006      	beq.n	80054d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	711a      	strb	r2, [r3, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f042 0202 	orr.w	r2, r2, #2
 80054d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2243      	movs	r2, #67	; 0x43
 80054da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80054dc:	4b02      	ldr	r3, [pc, #8]	; (80054e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000050 	.word	0x20000050

080054ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054f4:	2182      	movs	r1, #130	; 0x82
 80054f6:	4818      	ldr	r0, [pc, #96]	; (8005558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80054f8:	f000 fcdf 	bl	8005eba <USBD_GetEpDesc>
 80054fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054fe:	2101      	movs	r1, #1
 8005500:	4815      	ldr	r0, [pc, #84]	; (8005558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005502:	f000 fcda 	bl	8005eba <USBD_GetEpDesc>
 8005506:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005508:	2181      	movs	r1, #129	; 0x81
 800550a:	4813      	ldr	r0, [pc, #76]	; (8005558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800550c:	f000 fcd5 	bl	8005eba <USBD_GetEpDesc>
 8005510:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2210      	movs	r2, #16
 800551c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2200      	movs	r2, #0
 8005528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800552c:	711a      	strb	r2, [r3, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d006      	beq.n	8005546 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005540:	711a      	strb	r2, [r3, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2243      	movs	r2, #67	; 0x43
 800554a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800554c:	4b02      	ldr	r3, [pc, #8]	; (8005558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000050 	.word	0x20000050

0800555c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	220a      	movs	r2, #10
 8005568:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800556a:	4b03      	ldr	r3, [pc, #12]	; (8005578 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	2000000c 	.word	0x2000000c

0800557c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800558c:	2303      	movs	r3, #3
 800558e:	e009      	b.n	80055a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	33b0      	adds	r3, #176	; 0xb0
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	32b0      	adds	r2, #176	; 0xb0
 80055c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ca:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e008      	b.n	80055e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	32b0      	adds	r2, #176	; 0xb0
 8005608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005614:	2303      	movs	r3, #3
 8005616:	e004      	b.n	8005622 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	32b0      	adds	r2, #176	; 0xb0
 8005642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005646:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	32b0      	adds	r2, #176	; 0xb0
 8005656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800565e:	2303      	movs	r3, #3
 8005660:	e025      	b.n	80056ae <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005668:	2b00      	cmp	r3, #0
 800566a:	d11f      	bne.n	80056ac <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2201      	movs	r2, #1
 8005670:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005674:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <USBD_CDC_TransmitPacket+0x88>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	f003 020f 	and.w	r2, r3, #15
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4403      	add	r3, r0
 800568e:	3318      	adds	r3, #24
 8005690:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <USBD_CDC_TransmitPacket+0x88>)
 8005694:	7819      	ldrb	r1, [r3, #0]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f001 ffb3 	bl	800760e <USBD_LL_Transmit>

    ret = USBD_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000093 	.word	0x20000093

080056bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	32b0      	adds	r2, #176	; 0xb0
 80056ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	32b0      	adds	r2, #176	; 0xb0
 80056de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e018      	b.n	800571c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	7c1b      	ldrb	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10a      	bne.n	8005708 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <USBD_CDC_ReceivePacket+0x68>)
 80056f4:	7819      	ldrb	r1, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 ffa5 	bl	8007650 <USBD_LL_PrepareReceive>
 8005706:	e008      	b.n	800571a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005708:	4b06      	ldr	r3, [pc, #24]	; (8005724 <USBD_CDC_ReceivePacket+0x68>)
 800570a:	7819      	ldrb	r1, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005712:	2340      	movs	r3, #64	; 0x40
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 ff9b 	bl	8007650 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20000094 	.word	0x20000094

08005728 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	4613      	mov	r3, r2
 8005734:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800573c:	2303      	movs	r3, #3
 800573e:	e01f      	b.n	8005780 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	79fa      	ldrb	r2, [r7, #7]
 8005772:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f001 fe15 	bl	80073a4 <USBD_LL_Init>
 800577a:	4603      	mov	r3, r0
 800577c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800577e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800579c:	2303      	movs	r3, #3
 800579e:	e025      	b.n	80057ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	32ae      	adds	r2, #174	; 0xae
 80057b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00f      	beq.n	80057dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	32ae      	adds	r2, #174	; 0xae
 80057c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	f107 020e 	add.w	r2, r7, #14
 80057d0:	4610      	mov	r0, r2
 80057d2:	4798      	blx	r3
 80057d4:	4602      	mov	r2, r0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f001 fe1d 	bl	800743c <USBD_LL_Start>
 8005802:	4603      	mov	r3, r0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005814:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005816:	4618      	mov	r0, r3
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	460b      	mov	r3, r1
 800582c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d009      	beq.n	8005850 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	78fa      	ldrb	r2, [r7, #3]
 8005846:	4611      	mov	r1, r2
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	4798      	blx	r3
 800584c:	4603      	mov	r3, r0
 800584e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	460b      	mov	r3, r1
 8005864:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	78fa      	ldrb	r2, [r7, #3]
 8005874:	4611      	mov	r1, r2
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005880:	2303      	movs	r3, #3
 8005882:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 f908 	bl	8006ab6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80058b4:	461a      	mov	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d01a      	beq.n	8005900 <USBD_LL_SetupStage+0x72>
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d822      	bhi.n	8005914 <USBD_LL_SetupStage+0x86>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <USBD_LL_SetupStage+0x4a>
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d00a      	beq.n	80058ec <USBD_LL_SetupStage+0x5e>
 80058d6:	e01d      	b.n	8005914 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fb5f 	bl	8005fa4 <USBD_StdDevReq>
 80058e6:	4603      	mov	r3, r0
 80058e8:	73fb      	strb	r3, [r7, #15]
      break;
 80058ea:	e020      	b.n	800592e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fbc7 	bl	8006088 <USBD_StdItfReq>
 80058fa:	4603      	mov	r3, r0
 80058fc:	73fb      	strb	r3, [r7, #15]
      break;
 80058fe:	e016      	b.n	800592e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fc29 	bl	8006160 <USBD_StdEPReq>
 800590e:	4603      	mov	r3, r0
 8005910:	73fb      	strb	r3, [r7, #15]
      break;
 8005912:	e00c      	b.n	800592e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800591a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800591e:	b2db      	uxtb	r3, r3
 8005920:	4619      	mov	r1, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f001 fdea 	bl	80074fc <USBD_LL_StallEP>
 8005928:	4603      	mov	r3, r0
 800592a:	73fb      	strb	r3, [r7, #15]
      break;
 800592c:	bf00      	nop
  }

  return ret;
 800592e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	460b      	mov	r3, r1
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800594a:	7afb      	ldrb	r3, [r7, #11]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d16e      	bne.n	8005a2e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005956:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800595e:	2b03      	cmp	r3, #3
 8005960:	f040 8098 	bne.w	8005a94 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	429a      	cmp	r2, r3
 800596e:	d913      	bls.n	8005998 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	1ad2      	subs	r2, r2, r3
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	4293      	cmp	r3, r2
 8005988:	bf28      	it	cs
 800598a:	4613      	movcs	r3, r2
 800598c:	461a      	mov	r2, r3
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f001 f984 	bl	8006c9e <USBD_CtlContinueRx>
 8005996:	e07d      	b.n	8005a94 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d014      	beq.n	80059d0 <USBD_LL_DataOutStage+0x98>
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d81d      	bhi.n	80059e6 <USBD_LL_DataOutStage+0xae>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <USBD_LL_DataOutStage+0x7c>
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d003      	beq.n	80059ba <USBD_LL_DataOutStage+0x82>
 80059b2:	e018      	b.n	80059e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	75bb      	strb	r3, [r7, #22]
            break;
 80059b8:	e018      	b.n	80059ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	4619      	mov	r1, r3
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 fa5e 	bl	8005e86 <USBD_CoreFindIF>
 80059ca:	4603      	mov	r3, r0
 80059cc:	75bb      	strb	r3, [r7, #22]
            break;
 80059ce:	e00d      	b.n	80059ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	4619      	mov	r1, r3
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fa60 	bl	8005ea0 <USBD_CoreFindEP>
 80059e0:	4603      	mov	r3, r0
 80059e2:	75bb      	strb	r3, [r7, #22]
            break;
 80059e4:	e002      	b.n	80059ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75bb      	strb	r3, [r7, #22]
            break;
 80059ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80059ec:	7dbb      	ldrb	r3, [r7, #22]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d119      	bne.n	8005a26 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d113      	bne.n	8005a26 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80059fe:	7dba      	ldrb	r2, [r7, #22]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	32ae      	adds	r2, #174	; 0xae
 8005a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005a0e:	7dba      	ldrb	r2, [r7, #22]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005a16:	7dba      	ldrb	r2, [r7, #22]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	32ae      	adds	r2, #174	; 0xae
 8005a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f001 f94a 	bl	8006cc0 <USBD_CtlSendStatus>
 8005a2c:	e032      	b.n	8005a94 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005a2e:	7afb      	ldrb	r3, [r7, #11]
 8005a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	4619      	mov	r1, r3
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 fa31 	bl	8005ea0 <USBD_CoreFindEP>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a42:	7dbb      	ldrb	r3, [r7, #22]
 8005a44:	2bff      	cmp	r3, #255	; 0xff
 8005a46:	d025      	beq.n	8005a94 <USBD_LL_DataOutStage+0x15c>
 8005a48:	7dbb      	ldrb	r3, [r7, #22]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d122      	bne.n	8005a94 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d117      	bne.n	8005a8a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005a5a:	7dba      	ldrb	r2, [r7, #22]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	32ae      	adds	r2, #174	; 0xae
 8005a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00f      	beq.n	8005a8a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005a6a:	7dba      	ldrb	r2, [r7, #22]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005a72:	7dba      	ldrb	r2, [r7, #22]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	32ae      	adds	r2, #174	; 0xae
 8005a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	7afa      	ldrb	r2, [r7, #11]
 8005a80:	4611      	mov	r1, r2
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	4798      	blx	r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005a90:	7dfb      	ldrb	r3, [r7, #23]
 8005a92:	e000      	b.n	8005a96 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b086      	sub	sp, #24
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	607a      	str	r2, [r7, #4]
 8005aaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005aac:	7afb      	ldrb	r3, [r7, #11]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d16f      	bne.n	8005b92 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d15a      	bne.n	8005b78 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d914      	bls.n	8005af8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	1ad2      	subs	r2, r2, r3
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f001 f8ac 	bl	8006c42 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005aea:	2300      	movs	r3, #0
 8005aec:	2200      	movs	r2, #0
 8005aee:	2100      	movs	r1, #0
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f001 fdad 	bl	8007650 <USBD_LL_PrepareReceive>
 8005af6:	e03f      	b.n	8005b78 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d11c      	bne.n	8005b3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d316      	bcc.n	8005b3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d20f      	bcs.n	8005b3e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b1e:	2200      	movs	r2, #0
 8005b20:	2100      	movs	r1, #0
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f001 f88d 	bl	8006c42 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b30:	2300      	movs	r3, #0
 8005b32:	2200      	movs	r2, #0
 8005b34:	2100      	movs	r1, #0
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f001 fd8a 	bl	8007650 <USBD_LL_PrepareReceive>
 8005b3c:	e01c      	b.n	8005b78 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d10f      	bne.n	8005b6a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b6a:	2180      	movs	r1, #128	; 0x80
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f001 fcc5 	bl	80074fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f001 f8b7 	bl	8006ce6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d03a      	beq.n	8005bf8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff fe42 	bl	800580c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b90:	e032      	b.n	8005bf8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005b92:	7afb      	ldrb	r3, [r7, #11]
 8005b94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f97f 	bl	8005ea0 <USBD_CoreFindEP>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	2bff      	cmp	r3, #255	; 0xff
 8005baa:	d025      	beq.n	8005bf8 <USBD_LL_DataInStage+0x15a>
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d122      	bne.n	8005bf8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d11c      	bne.n	8005bf8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005bbe:	7dfa      	ldrb	r2, [r7, #23]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	32ae      	adds	r2, #174	; 0xae
 8005bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d014      	beq.n	8005bf8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005bce:	7dfa      	ldrb	r2, [r7, #23]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005bd6:	7dfa      	ldrb	r2, [r7, #23]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	32ae      	adds	r2, #174	; 0xae
 8005bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	7afa      	ldrb	r2, [r7, #11]
 8005be4:	4611      	mov	r1, r2
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	4798      	blx	r3
 8005bea:	4603      	mov	r3, r0
 8005bec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005bee:	7dbb      	ldrb	r3, [r7, #22]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005bf4:	7dbb      	ldrb	r3, [r7, #22]
 8005bf6:	e000      	b.n	8005bfa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d014      	beq.n	8005c68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00e      	beq.n	8005c68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6852      	ldr	r2, [r2, #4]
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	4611      	mov	r1, r2
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	4798      	blx	r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005c64:	2303      	movs	r3, #3
 8005c66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c68:	2340      	movs	r3, #64	; 0x40
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f001 fbff 	bl	8007472 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2240      	movs	r2, #64	; 0x40
 8005c80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c84:	2340      	movs	r3, #64	; 0x40
 8005c86:	2200      	movs	r2, #0
 8005c88:	2180      	movs	r1, #128	; 0x80
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 fbf1 	bl	8007472 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2240      	movs	r2, #64	; 0x40
 8005c9a:	621a      	str	r2, [r3, #32]

  return ret;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	78fa      	ldrb	r2, [r7, #3]
 8005cb6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2204      	movs	r2, #4
 8005ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d106      	bne.n	8005d14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d110      	bne.n	8005d58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	32ae      	adds	r2, #174	; 0xae
 8005d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e01c      	b.n	8005dbe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b03      	cmp	r3, #3
 8005d8e:	d115      	bne.n	8005dbc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	32ae      	adds	r2, #174	; 0xae
 8005d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00b      	beq.n	8005dbc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	32ae      	adds	r2, #174	; 0xae
 8005dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	78fa      	ldrb	r2, [r7, #3]
 8005db6:	4611      	mov	r1, r2
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	32ae      	adds	r2, #174	; 0xae
 8005ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e01c      	b.n	8005e22 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d115      	bne.n	8005e20 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	32ae      	adds	r2, #174	; 0xae
 8005dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	32ae      	adds	r2, #174	; 0xae
 8005e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	78fa      	ldrb	r2, [r7, #3]
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00e      	beq.n	8005e7c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6852      	ldr	r2, [r2, #4]
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	4798      	blx	r3
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005eac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b086      	sub	sp, #24
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	885b      	ldrh	r3, [r3, #2]
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d920      	bls.n	8005f24 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005eea:	e013      	b.n	8005f14 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005eec:	f107 030a 	add.w	r3, r7, #10
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6978      	ldr	r0, [r7, #20]
 8005ef4:	f000 f81b 	bl	8005f2e <USBD_GetNextDesc>
 8005ef8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	785b      	ldrb	r3, [r3, #1]
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d108      	bne.n	8005f14 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	789b      	ldrb	r3, [r3, #2]
 8005f0a:	78fa      	ldrb	r2, [r7, #3]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d008      	beq.n	8005f22 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	885b      	ldrh	r3, [r3, #2]
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	897b      	ldrh	r3, [r7, #10]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d8e5      	bhi.n	8005eec <USBD_GetEpDesc+0x32>
 8005f20:	e000      	b.n	8005f24 <USBD_GetEpDesc+0x6a>
          break;
 8005f22:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005f24:	693b      	ldr	r3, [r7, #16]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	881a      	ldrh	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4413      	add	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f86:	8a3b      	ldrh	r3, [r7, #16]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	b21a      	sxth	r2, r3
 8005f8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	b21b      	sxth	r3, r3
 8005f94:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f96:	89fb      	ldrh	r3, [r7, #14]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fba:	2b40      	cmp	r3, #64	; 0x40
 8005fbc:	d005      	beq.n	8005fca <USBD_StdDevReq+0x26>
 8005fbe:	2b40      	cmp	r3, #64	; 0x40
 8005fc0:	d857      	bhi.n	8006072 <USBD_StdDevReq+0xce>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00f      	beq.n	8005fe6 <USBD_StdDevReq+0x42>
 8005fc6:	2b20      	cmp	r3, #32
 8005fc8:	d153      	bne.n	8006072 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	32ae      	adds	r2, #174	; 0xae
 8005fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	4798      	blx	r3
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe4:	e04a      	b.n	800607c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	785b      	ldrb	r3, [r3, #1]
 8005fea:	2b09      	cmp	r3, #9
 8005fec:	d83b      	bhi.n	8006066 <USBD_StdDevReq+0xc2>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <USBD_StdDevReq+0x50>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	08006049 	.word	0x08006049
 8005ff8:	0800605d 	.word	0x0800605d
 8005ffc:	08006067 	.word	0x08006067
 8006000:	08006053 	.word	0x08006053
 8006004:	08006067 	.word	0x08006067
 8006008:	08006027 	.word	0x08006027
 800600c:	0800601d 	.word	0x0800601d
 8006010:	08006067 	.word	0x08006067
 8006014:	0800603f 	.word	0x0800603f
 8006018:	08006031 	.word	0x08006031
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fa3c 	bl	800649c <USBD_GetDescriptor>
          break;
 8006024:	e024      	b.n	8006070 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fba1 	bl	8006770 <USBD_SetAddress>
          break;
 800602e:	e01f      	b.n	8006070 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fbe0 	bl	80067f8 <USBD_SetConfig>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]
          break;
 800603c:	e018      	b.n	8006070 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fc83 	bl	800694c <USBD_GetConfig>
          break;
 8006046:	e013      	b.n	8006070 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fcb4 	bl	80069b8 <USBD_GetStatus>
          break;
 8006050:	e00e      	b.n	8006070 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006052:	6839      	ldr	r1, [r7, #0]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fce3 	bl	8006a20 <USBD_SetFeature>
          break;
 800605a:	e009      	b.n	8006070 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fd07 	bl	8006a72 <USBD_ClrFeature>
          break;
 8006064:	e004      	b.n	8006070 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fd5e 	bl	8006b2a <USBD_CtlError>
          break;
 800606e:	bf00      	nop
      }
      break;
 8006070:	e004      	b.n	800607c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006072:	6839      	ldr	r1, [r7, #0]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fd58 	bl	8006b2a <USBD_CtlError>
      break;
 800607a:	bf00      	nop
  }

  return ret;
 800607c:	7bfb      	ldrb	r3, [r7, #15]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop

08006088 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800609e:	2b40      	cmp	r3, #64	; 0x40
 80060a0:	d005      	beq.n	80060ae <USBD_StdItfReq+0x26>
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	d852      	bhi.n	800614c <USBD_StdItfReq+0xc4>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <USBD_StdItfReq+0x26>
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d14e      	bne.n	800614c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d840      	bhi.n	800613e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	889b      	ldrh	r3, [r3, #4]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d836      	bhi.n	8006134 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	889b      	ldrh	r3, [r3, #4]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7ff fed9 	bl	8005e86 <USBD_CoreFindIF>
 80060d4:	4603      	mov	r3, r0
 80060d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
 80060da:	2bff      	cmp	r3, #255	; 0xff
 80060dc:	d01d      	beq.n	800611a <USBD_StdItfReq+0x92>
 80060de:	7bbb      	ldrb	r3, [r7, #14]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d11a      	bne.n	800611a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80060e4:	7bba      	ldrb	r2, [r7, #14]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	32ae      	adds	r2, #174	; 0xae
 80060ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00f      	beq.n	8006114 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80060f4:	7bba      	ldrb	r2, [r7, #14]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060fc:	7bba      	ldrb	r2, [r7, #14]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	32ae      	adds	r2, #174	; 0xae
 8006102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
 800610e:	4603      	mov	r3, r0
 8006110:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006112:	e004      	b.n	800611e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006114:	2303      	movs	r3, #3
 8006116:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006118:	e001      	b.n	800611e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800611a:	2303      	movs	r3, #3
 800611c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	88db      	ldrh	r3, [r3, #6]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d110      	bne.n	8006148 <USBD_StdItfReq+0xc0>
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10d      	bne.n	8006148 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fdc7 	bl	8006cc0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006132:	e009      	b.n	8006148 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fcf7 	bl	8006b2a <USBD_CtlError>
          break;
 800613c:	e004      	b.n	8006148 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fcf2 	bl	8006b2a <USBD_CtlError>
          break;
 8006146:	e000      	b.n	800614a <USBD_StdItfReq+0xc2>
          break;
 8006148:	bf00      	nop
      }
      break;
 800614a:	e004      	b.n	8006156 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fceb 	bl	8006b2a <USBD_CtlError>
      break;
 8006154:	bf00      	nop
  }

  return ret;
 8006156:	7bfb      	ldrb	r3, [r7, #15]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	889b      	ldrh	r3, [r3, #4]
 8006172:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	d007      	beq.n	8006190 <USBD_StdEPReq+0x30>
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	f200 817f 	bhi.w	8006484 <USBD_StdEPReq+0x324>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d02a      	beq.n	80061e0 <USBD_StdEPReq+0x80>
 800618a:	2b20      	cmp	r3, #32
 800618c:	f040 817a 	bne.w	8006484 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff fe83 	bl	8005ea0 <USBD_CoreFindEP>
 800619a:	4603      	mov	r3, r0
 800619c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800619e:	7b7b      	ldrb	r3, [r7, #13]
 80061a0:	2bff      	cmp	r3, #255	; 0xff
 80061a2:	f000 8174 	beq.w	800648e <USBD_StdEPReq+0x32e>
 80061a6:	7b7b      	ldrb	r3, [r7, #13]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f040 8170 	bne.w	800648e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80061ae:	7b7a      	ldrb	r2, [r7, #13]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80061b6:	7b7a      	ldrb	r2, [r7, #13]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	32ae      	adds	r2, #174	; 0xae
 80061bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8163 	beq.w	800648e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80061c8:	7b7a      	ldrb	r2, [r7, #13]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	32ae      	adds	r2, #174	; 0xae
 80061ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
 80061da:	4603      	mov	r3, r0
 80061dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061de:	e156      	b.n	800648e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d008      	beq.n	80061fa <USBD_StdEPReq+0x9a>
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	f300 8145 	bgt.w	8006478 <USBD_StdEPReq+0x318>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 809b 	beq.w	800632a <USBD_StdEPReq+0x1ca>
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d03c      	beq.n	8006272 <USBD_StdEPReq+0x112>
 80061f8:	e13e      	b.n	8006478 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d002      	beq.n	800620c <USBD_StdEPReq+0xac>
 8006206:	2b03      	cmp	r3, #3
 8006208:	d016      	beq.n	8006238 <USBD_StdEPReq+0xd8>
 800620a:	e02c      	b.n	8006266 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00d      	beq.n	800622e <USBD_StdEPReq+0xce>
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	2b80      	cmp	r3, #128	; 0x80
 8006216:	d00a      	beq.n	800622e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006218:	7bbb      	ldrb	r3, [r7, #14]
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 f96d 	bl	80074fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006222:	2180      	movs	r1, #128	; 0x80
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f001 f969 	bl	80074fc <USBD_LL_StallEP>
 800622a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800622c:	e020      	b.n	8006270 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fc7a 	bl	8006b2a <USBD_CtlError>
              break;
 8006236:	e01b      	b.n	8006270 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	885b      	ldrh	r3, [r3, #2]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10e      	bne.n	800625e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006240:	7bbb      	ldrb	r3, [r7, #14]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <USBD_StdEPReq+0xfe>
 8006246:	7bbb      	ldrb	r3, [r7, #14]
 8006248:	2b80      	cmp	r3, #128	; 0x80
 800624a:	d008      	beq.n	800625e <USBD_StdEPReq+0xfe>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	88db      	ldrh	r3, [r3, #6]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006254:	7bbb      	ldrb	r3, [r7, #14]
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f001 f94f 	bl	80074fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fd2e 	bl	8006cc0 <USBD_CtlSendStatus>

              break;
 8006264:	e004      	b.n	8006270 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fc5e 	bl	8006b2a <USBD_CtlError>
              break;
 800626e:	bf00      	nop
          }
          break;
 8006270:	e107      	b.n	8006482 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d002      	beq.n	8006284 <USBD_StdEPReq+0x124>
 800627e:	2b03      	cmp	r3, #3
 8006280:	d016      	beq.n	80062b0 <USBD_StdEPReq+0x150>
 8006282:	e04b      	b.n	800631c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006284:	7bbb      	ldrb	r3, [r7, #14]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00d      	beq.n	80062a6 <USBD_StdEPReq+0x146>
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	2b80      	cmp	r3, #128	; 0x80
 800628e:	d00a      	beq.n	80062a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006290:	7bbb      	ldrb	r3, [r7, #14]
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 f931 	bl	80074fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800629a:	2180      	movs	r1, #128	; 0x80
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 f92d 	bl	80074fc <USBD_LL_StallEP>
 80062a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062a4:	e040      	b.n	8006328 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fc3e 	bl	8006b2a <USBD_CtlError>
              break;
 80062ae:	e03b      	b.n	8006328 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	885b      	ldrh	r3, [r3, #2]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d136      	bne.n	8006326 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80062b8:	7bbb      	ldrb	r3, [r7, #14]
 80062ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d004      	beq.n	80062cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80062c2:	7bbb      	ldrb	r3, [r7, #14]
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 f937 	bl	800753a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fcf7 	bl	8006cc0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80062d2:	7bbb      	ldrb	r3, [r7, #14]
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff fde2 	bl	8005ea0 <USBD_CoreFindEP>
 80062dc:	4603      	mov	r3, r0
 80062de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062e0:	7b7b      	ldrb	r3, [r7, #13]
 80062e2:	2bff      	cmp	r3, #255	; 0xff
 80062e4:	d01f      	beq.n	8006326 <USBD_StdEPReq+0x1c6>
 80062e6:	7b7b      	ldrb	r3, [r7, #13]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d11c      	bne.n	8006326 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80062ec:	7b7a      	ldrb	r2, [r7, #13]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80062f4:	7b7a      	ldrb	r2, [r7, #13]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	32ae      	adds	r2, #174	; 0xae
 80062fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d010      	beq.n	8006326 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006304:	7b7a      	ldrb	r2, [r7, #13]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	32ae      	adds	r2, #174	; 0xae
 800630a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	4798      	blx	r3
 8006316:	4603      	mov	r3, r0
 8006318:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800631a:	e004      	b.n	8006326 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fc03 	bl	8006b2a <USBD_CtlError>
              break;
 8006324:	e000      	b.n	8006328 <USBD_StdEPReq+0x1c8>
              break;
 8006326:	bf00      	nop
          }
          break;
 8006328:	e0ab      	b.n	8006482 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d002      	beq.n	800633c <USBD_StdEPReq+0x1dc>
 8006336:	2b03      	cmp	r3, #3
 8006338:	d032      	beq.n	80063a0 <USBD_StdEPReq+0x240>
 800633a:	e097      	b.n	800646c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <USBD_StdEPReq+0x1f2>
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	2b80      	cmp	r3, #128	; 0x80
 8006346:	d004      	beq.n	8006352 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fbed 	bl	8006b2a <USBD_CtlError>
                break;
 8006350:	e091      	b.n	8006476 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006352:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006356:	2b00      	cmp	r3, #0
 8006358:	da0b      	bge.n	8006372 <USBD_StdEPReq+0x212>
 800635a:	7bbb      	ldrb	r3, [r7, #14]
 800635c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	3310      	adds	r3, #16
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	3304      	adds	r3, #4
 8006370:	e00b      	b.n	800638a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006372:	7bbb      	ldrb	r3, [r7, #14]
 8006374:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4413      	add	r3, r2
 8006388:	3304      	adds	r3, #4
 800638a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2202      	movs	r2, #2
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fc37 	bl	8006c0c <USBD_CtlSendData>
              break;
 800639e:	e06a      	b.n	8006476 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80063a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	da11      	bge.n	80063cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80063a8:	7bbb      	ldrb	r3, [r7, #14]
 80063aa:	f003 020f 	and.w	r2, r3, #15
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	440b      	add	r3, r1
 80063ba:	3324      	adds	r3, #36	; 0x24
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d117      	bne.n	80063f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fbb0 	bl	8006b2a <USBD_CtlError>
                  break;
 80063ca:	e054      	b.n	8006476 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063cc:	7bbb      	ldrb	r3, [r7, #14]
 80063ce:	f003 020f 	and.w	r2, r3, #15
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d104      	bne.n	80063f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fb9d 	bl	8006b2a <USBD_CtlError>
                  break;
 80063f0:	e041      	b.n	8006476 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da0b      	bge.n	8006412 <USBD_StdEPReq+0x2b2>
 80063fa:	7bbb      	ldrb	r3, [r7, #14]
 80063fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006400:	4613      	mov	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	3310      	adds	r3, #16
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	3304      	adds	r3, #4
 8006410:	e00b      	b.n	800642a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006418:	4613      	mov	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	4413      	add	r3, r2
 8006428:	3304      	adds	r3, #4
 800642a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <USBD_StdEPReq+0x2d8>
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	2b80      	cmp	r3, #128	; 0x80
 8006436:	d103      	bne.n	8006440 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	e00e      	b.n	800645e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 f897 	bl	8007578 <USBD_LL_IsStallEP>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2201      	movs	r2, #1
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e002      	b.n	800645e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2202      	movs	r2, #2
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fbd1 	bl	8006c0c <USBD_CtlSendData>
              break;
 800646a:	e004      	b.n	8006476 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fb5b 	bl	8006b2a <USBD_CtlError>
              break;
 8006474:	bf00      	nop
          }
          break;
 8006476:	e004      	b.n	8006482 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fb55 	bl	8006b2a <USBD_CtlError>
          break;
 8006480:	bf00      	nop
      }
      break;
 8006482:	e005      	b.n	8006490 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fb4f 	bl	8006b2a <USBD_CtlError>
      break;
 800648c:	e000      	b.n	8006490 <USBD_StdEPReq+0x330>
      break;
 800648e:	bf00      	nop
  }

  return ret;
 8006490:	7bfb      	ldrb	r3, [r7, #15]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	885b      	ldrh	r3, [r3, #2]
 80064b6:	0a1b      	lsrs	r3, r3, #8
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	2b06      	cmp	r3, #6
 80064be:	f200 8128 	bhi.w	8006712 <USBD_GetDescriptor+0x276>
 80064c2:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <USBD_GetDescriptor+0x2c>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064e5 	.word	0x080064e5
 80064cc:	080064fd 	.word	0x080064fd
 80064d0:	0800653d 	.word	0x0800653d
 80064d4:	08006713 	.word	0x08006713
 80064d8:	08006713 	.word	0x08006713
 80064dc:	080066b3 	.word	0x080066b3
 80064e0:	080066df 	.word	0x080066df
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	7c12      	ldrb	r2, [r2, #16]
 80064f0:	f107 0108 	add.w	r1, r7, #8
 80064f4:	4610      	mov	r0, r2
 80064f6:	4798      	blx	r3
 80064f8:	60f8      	str	r0, [r7, #12]
      break;
 80064fa:	e112      	b.n	8006722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	7c1b      	ldrb	r3, [r3, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10d      	bne.n	8006520 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650c:	f107 0208 	add.w	r2, r7, #8
 8006510:	4610      	mov	r0, r2
 8006512:	4798      	blx	r3
 8006514:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3301      	adds	r3, #1
 800651a:	2202      	movs	r2, #2
 800651c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800651e:	e100      	b.n	8006722 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	f107 0208 	add.w	r2, r7, #8
 800652c:	4610      	mov	r0, r2
 800652e:	4798      	blx	r3
 8006530:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3301      	adds	r3, #1
 8006536:	2202      	movs	r2, #2
 8006538:	701a      	strb	r2, [r3, #0]
      break;
 800653a:	e0f2      	b.n	8006722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	885b      	ldrh	r3, [r3, #2]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b05      	cmp	r3, #5
 8006544:	f200 80ac 	bhi.w	80066a0 <USBD_GetDescriptor+0x204>
 8006548:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <USBD_GetDescriptor+0xb4>)
 800654a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654e:	bf00      	nop
 8006550:	08006569 	.word	0x08006569
 8006554:	0800659d 	.word	0x0800659d
 8006558:	080065d1 	.word	0x080065d1
 800655c:	08006605 	.word	0x08006605
 8006560:	08006639 	.word	0x08006639
 8006564:	0800666d 	.word	0x0800666d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	7c12      	ldrb	r2, [r2, #16]
 8006580:	f107 0108 	add.w	r1, r7, #8
 8006584:	4610      	mov	r0, r2
 8006586:	4798      	blx	r3
 8006588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800658a:	e091      	b.n	80066b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 facb 	bl	8006b2a <USBD_CtlError>
            err++;
 8006594:	7afb      	ldrb	r3, [r7, #11]
 8006596:	3301      	adds	r3, #1
 8006598:	72fb      	strb	r3, [r7, #11]
          break;
 800659a:	e089      	b.n	80066b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	7c12      	ldrb	r2, [r2, #16]
 80065b4:	f107 0108 	add.w	r1, r7, #8
 80065b8:	4610      	mov	r0, r2
 80065ba:	4798      	blx	r3
 80065bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065be:	e077      	b.n	80066b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fab1 	bl	8006b2a <USBD_CtlError>
            err++;
 80065c8:	7afb      	ldrb	r3, [r7, #11]
 80065ca:	3301      	adds	r3, #1
 80065cc:	72fb      	strb	r3, [r7, #11]
          break;
 80065ce:	e06f      	b.n	80066b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	7c12      	ldrb	r2, [r2, #16]
 80065e8:	f107 0108 	add.w	r1, r7, #8
 80065ec:	4610      	mov	r0, r2
 80065ee:	4798      	blx	r3
 80065f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065f2:	e05d      	b.n	80066b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa97 	bl	8006b2a <USBD_CtlError>
            err++;
 80065fc:	7afb      	ldrb	r3, [r7, #11]
 80065fe:	3301      	adds	r3, #1
 8006600:	72fb      	strb	r3, [r7, #11]
          break;
 8006602:	e055      	b.n	80066b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	7c12      	ldrb	r2, [r2, #16]
 800661c:	f107 0108 	add.w	r1, r7, #8
 8006620:	4610      	mov	r0, r2
 8006622:	4798      	blx	r3
 8006624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006626:	e043      	b.n	80066b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fa7d 	bl	8006b2a <USBD_CtlError>
            err++;
 8006630:	7afb      	ldrb	r3, [r7, #11]
 8006632:	3301      	adds	r3, #1
 8006634:	72fb      	strb	r3, [r7, #11]
          break;
 8006636:	e03b      	b.n	80066b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	7c12      	ldrb	r2, [r2, #16]
 8006650:	f107 0108 	add.w	r1, r7, #8
 8006654:	4610      	mov	r0, r2
 8006656:	4798      	blx	r3
 8006658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800665a:	e029      	b.n	80066b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fa63 	bl	8006b2a <USBD_CtlError>
            err++;
 8006664:	7afb      	ldrb	r3, [r7, #11]
 8006666:	3301      	adds	r3, #1
 8006668:	72fb      	strb	r3, [r7, #11]
          break;
 800666a:	e021      	b.n	80066b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	7c12      	ldrb	r2, [r2, #16]
 8006684:	f107 0108 	add.w	r1, r7, #8
 8006688:	4610      	mov	r0, r2
 800668a:	4798      	blx	r3
 800668c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800668e:	e00f      	b.n	80066b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fa49 	bl	8006b2a <USBD_CtlError>
            err++;
 8006698:	7afb      	ldrb	r3, [r7, #11]
 800669a:	3301      	adds	r3, #1
 800669c:	72fb      	strb	r3, [r7, #11]
          break;
 800669e:	e007      	b.n	80066b0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa41 	bl	8006b2a <USBD_CtlError>
          err++;
 80066a8:	7afb      	ldrb	r3, [r7, #11]
 80066aa:	3301      	adds	r3, #1
 80066ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80066ae:	bf00      	nop
      }
      break;
 80066b0:	e037      	b.n	8006722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7c1b      	ldrb	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d109      	bne.n	80066ce <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c2:	f107 0208 	add.w	r2, r7, #8
 80066c6:	4610      	mov	r0, r2
 80066c8:	4798      	blx	r3
 80066ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066cc:	e029      	b.n	8006722 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fa2a 	bl	8006b2a <USBD_CtlError>
        err++;
 80066d6:	7afb      	ldrb	r3, [r7, #11]
 80066d8:	3301      	adds	r3, #1
 80066da:	72fb      	strb	r3, [r7, #11]
      break;
 80066dc:	e021      	b.n	8006722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7c1b      	ldrb	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	f107 0208 	add.w	r2, r7, #8
 80066f2:	4610      	mov	r0, r2
 80066f4:	4798      	blx	r3
 80066f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3301      	adds	r3, #1
 80066fc:	2207      	movs	r2, #7
 80066fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006700:	e00f      	b.n	8006722 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fa10 	bl	8006b2a <USBD_CtlError>
        err++;
 800670a:	7afb      	ldrb	r3, [r7, #11]
 800670c:	3301      	adds	r3, #1
 800670e:	72fb      	strb	r3, [r7, #11]
      break;
 8006710:	e007      	b.n	8006722 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fa08 	bl	8006b2a <USBD_CtlError>
      err++;
 800671a:	7afb      	ldrb	r3, [r7, #11]
 800671c:	3301      	adds	r3, #1
 800671e:	72fb      	strb	r3, [r7, #11]
      break;
 8006720:	bf00      	nop
  }

  if (err != 0U)
 8006722:	7afb      	ldrb	r3, [r7, #11]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d11e      	bne.n	8006766 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	88db      	ldrh	r3, [r3, #6]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d016      	beq.n	800675e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006730:	893b      	ldrh	r3, [r7, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00e      	beq.n	8006754 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	88da      	ldrh	r2, [r3, #6]
 800673a:	893b      	ldrh	r3, [r7, #8]
 800673c:	4293      	cmp	r3, r2
 800673e:	bf28      	it	cs
 8006740:	4613      	movcs	r3, r2
 8006742:	b29b      	uxth	r3, r3
 8006744:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006746:	893b      	ldrh	r3, [r7, #8]
 8006748:	461a      	mov	r2, r3
 800674a:	68f9      	ldr	r1, [r7, #12]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fa5d 	bl	8006c0c <USBD_CtlSendData>
 8006752:	e009      	b.n	8006768 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9e7 	bl	8006b2a <USBD_CtlError>
 800675c:	e004      	b.n	8006768 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 faae 	bl	8006cc0 <USBD_CtlSendStatus>
 8006764:	e000      	b.n	8006768 <USBD_GetDescriptor+0x2cc>
    return;
 8006766:	bf00      	nop
  }
}
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop

08006770 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	889b      	ldrh	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d131      	bne.n	80067e6 <USBD_SetAddress+0x76>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	88db      	ldrh	r3, [r3, #6]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d12d      	bne.n	80067e6 <USBD_SetAddress+0x76>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	885b      	ldrh	r3, [r3, #2]
 800678e:	2b7f      	cmp	r3, #127	; 0x7f
 8006790:	d829      	bhi.n	80067e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	885b      	ldrh	r3, [r3, #2]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d104      	bne.n	80067b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f9bc 	bl	8006b2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b2:	e01d      	b.n	80067f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	7bfa      	ldrb	r2, [r7, #15]
 80067b8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 ff05 	bl	80075d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fa7a 	bl	8006cc0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d004      	beq.n	80067dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2202      	movs	r2, #2
 80067d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067da:	e009      	b.n	80067f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e4:	e004      	b.n	80067f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f99e 	bl	8006b2a <USBD_CtlError>
  }
}
 80067ee:	bf00      	nop
 80067f0:	bf00      	nop
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	885b      	ldrh	r3, [r3, #2]
 800680a:	b2da      	uxtb	r2, r3
 800680c:	4b4e      	ldr	r3, [pc, #312]	; (8006948 <USBD_SetConfig+0x150>)
 800680e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006810:	4b4d      	ldr	r3, [pc, #308]	; (8006948 <USBD_SetConfig+0x150>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d905      	bls.n	8006824 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f985 	bl	8006b2a <USBD_CtlError>
    return USBD_FAIL;
 8006820:	2303      	movs	r3, #3
 8006822:	e08c      	b.n	800693e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d002      	beq.n	8006836 <USBD_SetConfig+0x3e>
 8006830:	2b03      	cmp	r3, #3
 8006832:	d029      	beq.n	8006888 <USBD_SetConfig+0x90>
 8006834:	e075      	b.n	8006922 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006836:	4b44      	ldr	r3, [pc, #272]	; (8006948 <USBD_SetConfig+0x150>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d020      	beq.n	8006880 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800683e:	4b42      	ldr	r3, [pc, #264]	; (8006948 <USBD_SetConfig+0x150>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006848:	4b3f      	ldr	r3, [pc, #252]	; (8006948 <USBD_SetConfig+0x150>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fe ffe7 	bl	8005822 <USBD_SetClassConfig>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d008      	beq.n	8006870 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f962 	bl	8006b2a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800686e:	e065      	b.n	800693c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fa25 	bl	8006cc0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2203      	movs	r2, #3
 800687a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800687e:	e05d      	b.n	800693c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fa1d 	bl	8006cc0 <USBD_CtlSendStatus>
      break;
 8006886:	e059      	b.n	800693c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006888:	4b2f      	ldr	r3, [pc, #188]	; (8006948 <USBD_SetConfig+0x150>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d112      	bne.n	80068b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006898:	4b2b      	ldr	r3, [pc, #172]	; (8006948 <USBD_SetConfig+0x150>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068a2:	4b29      	ldr	r3, [pc, #164]	; (8006948 <USBD_SetConfig+0x150>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7fe ffd6 	bl	800585a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa06 	bl	8006cc0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068b4:	e042      	b.n	800693c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80068b6:	4b24      	ldr	r3, [pc, #144]	; (8006948 <USBD_SetConfig+0x150>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d02a      	beq.n	800691a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7fe ffc4 	bl	800585a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80068d2:	4b1d      	ldr	r3, [pc, #116]	; (8006948 <USBD_SetConfig+0x150>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068dc:	4b1a      	ldr	r3, [pc, #104]	; (8006948 <USBD_SetConfig+0x150>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fe ff9d 	bl	8005822 <USBD_SetClassConfig>
 80068e8:	4603      	mov	r3, r0
 80068ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00f      	beq.n	8006912 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f918 	bl	8006b2a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7fe ffa9 	bl	800585a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006910:	e014      	b.n	800693c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f9d4 	bl	8006cc0 <USBD_CtlSendStatus>
      break;
 8006918:	e010      	b.n	800693c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f9d0 	bl	8006cc0 <USBD_CtlSendStatus>
      break;
 8006920:	e00c      	b.n	800693c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f900 	bl	8006b2a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800692a:	4b07      	ldr	r3, [pc, #28]	; (8006948 <USBD_SetConfig+0x150>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7fe ff92 	bl	800585a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006936:	2303      	movs	r3, #3
 8006938:	73fb      	strb	r3, [r7, #15]
      break;
 800693a:	bf00      	nop
  }

  return ret;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20000164 	.word	0x20000164

0800694c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	88db      	ldrh	r3, [r3, #6]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d004      	beq.n	8006968 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f8e2 	bl	8006b2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006966:	e023      	b.n	80069b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	dc02      	bgt.n	800697a <USBD_GetConfig+0x2e>
 8006974:	2b00      	cmp	r3, #0
 8006976:	dc03      	bgt.n	8006980 <USBD_GetConfig+0x34>
 8006978:	e015      	b.n	80069a6 <USBD_GetConfig+0x5a>
 800697a:	2b03      	cmp	r3, #3
 800697c:	d00b      	beq.n	8006996 <USBD_GetConfig+0x4a>
 800697e:	e012      	b.n	80069a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3308      	adds	r3, #8
 800698a:	2201      	movs	r2, #1
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f93c 	bl	8006c0c <USBD_CtlSendData>
        break;
 8006994:	e00c      	b.n	80069b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3304      	adds	r3, #4
 800699a:	2201      	movs	r2, #1
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f934 	bl	8006c0c <USBD_CtlSendData>
        break;
 80069a4:	e004      	b.n	80069b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f8be 	bl	8006b2a <USBD_CtlError>
        break;
 80069ae:	bf00      	nop
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d81e      	bhi.n	8006a0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	88db      	ldrh	r3, [r3, #6]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d004      	beq.n	80069e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f8a5 	bl	8006b2a <USBD_CtlError>
        break;
 80069e0:	e01a      	b.n	8006a18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f043 0202 	orr.w	r2, r3, #2
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	330c      	adds	r3, #12
 8006a02:	2202      	movs	r2, #2
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f900 	bl	8006c0c <USBD_CtlSendData>
      break;
 8006a0c:	e004      	b.n	8006a18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f88a 	bl	8006b2a <USBD_CtlError>
      break;
 8006a16:	bf00      	nop
  }
}
 8006a18:	bf00      	nop
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	885b      	ldrh	r3, [r3, #2]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d107      	bne.n	8006a42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f940 	bl	8006cc0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006a40:	e013      	b.n	8006a6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	885b      	ldrh	r3, [r3, #2]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d10b      	bne.n	8006a62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	889b      	ldrh	r3, [r3, #4]
 8006a4e:	0a1b      	lsrs	r3, r3, #8
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f930 	bl	8006cc0 <USBD_CtlSendStatus>
}
 8006a60:	e003      	b.n	8006a6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f860 	bl	8006b2a <USBD_CtlError>
}
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b082      	sub	sp, #8
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d80b      	bhi.n	8006aa2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	885b      	ldrh	r3, [r3, #2]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d10c      	bne.n	8006aac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f910 	bl	8006cc0 <USBD_CtlSendStatus>
      }
      break;
 8006aa0:	e004      	b.n	8006aac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f840 	bl	8006b2a <USBD_CtlError>
      break;
 8006aaa:	e000      	b.n	8006aae <USBD_ClrFeature+0x3c>
      break;
 8006aac:	bf00      	nop
  }
}
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	781a      	ldrb	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	781a      	ldrb	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3301      	adds	r3, #1
 8006ade:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f7ff fa41 	bl	8005f68 <SWAPBYTE>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	461a      	mov	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3301      	adds	r3, #1
 8006af8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f7ff fa34 	bl	8005f68 <SWAPBYTE>
 8006b00:	4603      	mov	r3, r0
 8006b02:	461a      	mov	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3301      	adds	r3, #1
 8006b12:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7ff fa27 	bl	8005f68 <SWAPBYTE>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	80da      	strh	r2, [r3, #6]
}
 8006b22:	bf00      	nop
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b082      	sub	sp, #8
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b34:	2180      	movs	r1, #128	; 0x80
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fce0 	bl	80074fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fcdc 	bl	80074fc <USBD_LL_StallEP>
}
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d036      	beq.n	8006bd0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006b66:	6938      	ldr	r0, [r7, #16]
 8006b68:	f000 f836 	bl	8006bd8 <USBD_GetLen>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	3301      	adds	r3, #1
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	4413      	add	r3, r2
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	7812      	ldrb	r2, [r2, #0]
 8006b84:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b86:	7dfb      	ldrb	r3, [r7, #23]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	4413      	add	r3, r2
 8006b92:	2203      	movs	r2, #3
 8006b94:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b9c:	e013      	b.n	8006bc6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	7812      	ldrb	r2, [r2, #0]
 8006ba8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	3301      	adds	r3, #1
 8006bae:	613b      	str	r3, [r7, #16]
    idx++;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	4413      	add	r3, r2
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]
    idx++;
 8006bc0:	7dfb      	ldrb	r3, [r7, #23]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e7      	bne.n	8006b9e <USBD_GetString+0x52>
 8006bce:	e000      	b.n	8006bd2 <USBD_GetString+0x86>
    return;
 8006bd0:	bf00      	nop
  }
}
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006be8:	e005      	b.n	8006bf6 <USBD_GetLen+0x1e>
  {
    len++;
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	3301      	adds	r3, #1
 8006bee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1f5      	bne.n	8006bea <USBD_GetLen+0x12>
  }

  return len;
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	2100      	movs	r1, #0
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 fceb 	bl	800760e <USBD_LL_Transmit>

  return USBD_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	2100      	movs	r1, #0
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 fcda 	bl	800760e <USBD_LL_Transmit>

  return USBD_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2203      	movs	r2, #3
 8006c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 fcde 	bl	8007650 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	2100      	movs	r1, #0
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 fccd 	bl	8007650 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2204      	movs	r2, #4
 8006ccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fc99 	bl	800760e <USBD_LL_Transmit>

  return USBD_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2205      	movs	r2, #5
 8006cf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fca7 	bl	8007650 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d10:	2200      	movs	r2, #0
 8006d12:	4912      	ldr	r1, [pc, #72]	; (8006d5c <MX_USB_DEVICE_Init+0x50>)
 8006d14:	4812      	ldr	r0, [pc, #72]	; (8006d60 <MX_USB_DEVICE_Init+0x54>)
 8006d16:	f7fe fd07 	bl	8005728 <USBD_Init>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d20:	f7f9 fd92 	bl	8000848 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d24:	490f      	ldr	r1, [pc, #60]	; (8006d64 <MX_USB_DEVICE_Init+0x58>)
 8006d26:	480e      	ldr	r0, [pc, #56]	; (8006d60 <MX_USB_DEVICE_Init+0x54>)
 8006d28:	f7fe fd2e 	bl	8005788 <USBD_RegisterClass>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d32:	f7f9 fd89 	bl	8000848 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d36:	490c      	ldr	r1, [pc, #48]	; (8006d68 <MX_USB_DEVICE_Init+0x5c>)
 8006d38:	4809      	ldr	r0, [pc, #36]	; (8006d60 <MX_USB_DEVICE_Init+0x54>)
 8006d3a:	f7fe fc1f 	bl	800557c <USBD_CDC_RegisterInterface>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d44:	f7f9 fd80 	bl	8000848 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d48:	4805      	ldr	r0, [pc, #20]	; (8006d60 <MX_USB_DEVICE_Init+0x54>)
 8006d4a:	f7fe fd53 	bl	80057f4 <USBD_Start>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d54:	f7f9 fd78 	bl	8000848 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d58:	bf00      	nop
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	200000ac 	.word	0x200000ac
 8006d60:	20000168 	.word	0x20000168
 8006d64:	20000018 	.word	0x20000018
 8006d68:	20000098 	.word	0x20000098

08006d6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006d70:	2200      	movs	r2, #0
 8006d72:	4905      	ldr	r1, [pc, #20]	; (8006d88 <CDC_Init_FS+0x1c>)
 8006d74:	4805      	ldr	r0, [pc, #20]	; (8006d8c <CDC_Init_FS+0x20>)
 8006d76:	f7fe fc1b 	bl	80055b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006d7a:	4905      	ldr	r1, [pc, #20]	; (8006d90 <CDC_Init_FS+0x24>)
 8006d7c:	4803      	ldr	r0, [pc, #12]	; (8006d8c <CDC_Init_FS+0x20>)
 8006d7e:	f7fe fc39 	bl	80055f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006d82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20000c44 	.word	0x20000c44
 8006d8c:	20000168 	.word	0x20000168
 8006d90:	20000444 	.word	0x20000444

08006d94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	6039      	str	r1, [r7, #0]
 8006dae:	71fb      	strb	r3, [r7, #7]
 8006db0:	4613      	mov	r3, r2
 8006db2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006db4:	79fb      	ldrb	r3, [r7, #7]
 8006db6:	2b23      	cmp	r3, #35	; 0x23
 8006db8:	d84a      	bhi.n	8006e50 <CDC_Control_FS+0xac>
 8006dba:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <CDC_Control_FS+0x1c>)
 8006dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc0:	08006e51 	.word	0x08006e51
 8006dc4:	08006e51 	.word	0x08006e51
 8006dc8:	08006e51 	.word	0x08006e51
 8006dcc:	08006e51 	.word	0x08006e51
 8006dd0:	08006e51 	.word	0x08006e51
 8006dd4:	08006e51 	.word	0x08006e51
 8006dd8:	08006e51 	.word	0x08006e51
 8006ddc:	08006e51 	.word	0x08006e51
 8006de0:	08006e51 	.word	0x08006e51
 8006de4:	08006e51 	.word	0x08006e51
 8006de8:	08006e51 	.word	0x08006e51
 8006dec:	08006e51 	.word	0x08006e51
 8006df0:	08006e51 	.word	0x08006e51
 8006df4:	08006e51 	.word	0x08006e51
 8006df8:	08006e51 	.word	0x08006e51
 8006dfc:	08006e51 	.word	0x08006e51
 8006e00:	08006e51 	.word	0x08006e51
 8006e04:	08006e51 	.word	0x08006e51
 8006e08:	08006e51 	.word	0x08006e51
 8006e0c:	08006e51 	.word	0x08006e51
 8006e10:	08006e51 	.word	0x08006e51
 8006e14:	08006e51 	.word	0x08006e51
 8006e18:	08006e51 	.word	0x08006e51
 8006e1c:	08006e51 	.word	0x08006e51
 8006e20:	08006e51 	.word	0x08006e51
 8006e24:	08006e51 	.word	0x08006e51
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e51 	.word	0x08006e51
 8006e30:	08006e51 	.word	0x08006e51
 8006e34:	08006e51 	.word	0x08006e51
 8006e38:	08006e51 	.word	0x08006e51
 8006e3c:	08006e51 	.word	0x08006e51
 8006e40:	08006e51 	.word	0x08006e51
 8006e44:	08006e51 	.word	0x08006e51
 8006e48:	08006e51 	.word	0x08006e51
 8006e4c:	08006e51 	.word	0x08006e51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006e50:	bf00      	nop
  }

  return (USBD_OK);
 8006e52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	4805      	ldr	r0, [pc, #20]	; (8006e84 <CDC_Receive_FS+0x24>)
 8006e6e:	f7fe fbc1 	bl	80055f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e72:	4804      	ldr	r0, [pc, #16]	; (8006e84 <CDC_Receive_FS+0x24>)
 8006e74:	f7fe fc22 	bl	80056bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006e78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20000168 	.word	0x20000168

08006e88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006e98:	4b0d      	ldr	r3, [pc, #52]	; (8006ed0 <CDC_Transmit_FS+0x48>)
 8006e9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e00b      	b.n	8006ec6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006eae:	887b      	ldrh	r3, [r7, #2]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	6879      	ldr	r1, [r7, #4]
 8006eb4:	4806      	ldr	r0, [pc, #24]	; (8006ed0 <CDC_Transmit_FS+0x48>)
 8006eb6:	f7fe fb7b 	bl	80055b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006eba:	4805      	ldr	r0, [pc, #20]	; (8006ed0 <CDC_Transmit_FS+0x48>)
 8006ebc:	f7fe fbb8 	bl	8005630 <USBD_CDC_TransmitPacket>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000168 	.word	0x20000168

08006ed4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
	...

08006ef8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	4603      	mov	r3, r0
 8006f00:	6039      	str	r1, [r7, #0]
 8006f02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2212      	movs	r2, #18
 8006f08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f0a:	4b03      	ldr	r3, [pc, #12]	; (8006f18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	200000c8 	.word	0x200000c8

08006f1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	6039      	str	r1, [r7, #0]
 8006f26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f2e:	4b03      	ldr	r3, [pc, #12]	; (8006f3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	200000dc 	.word	0x200000dc

08006f40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	6039      	str	r1, [r7, #0]
 8006f4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f4c:	79fb      	ldrb	r3, [r7, #7]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d105      	bne.n	8006f5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	4907      	ldr	r1, [pc, #28]	; (8006f74 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f56:	4808      	ldr	r0, [pc, #32]	; (8006f78 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f58:	f7ff fdf8 	bl	8006b4c <USBD_GetString>
 8006f5c:	e004      	b.n	8006f68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	4904      	ldr	r1, [pc, #16]	; (8006f74 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f62:	4805      	ldr	r0, [pc, #20]	; (8006f78 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f64:	f7ff fdf2 	bl	8006b4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f68:	4b02      	ldr	r3, [pc, #8]	; (8006f74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20001444 	.word	0x20001444
 8006f78:	080077e0 	.word	0x080077e0

08006f7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	6039      	str	r1, [r7, #0]
 8006f86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	4904      	ldr	r1, [pc, #16]	; (8006f9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f8c:	4804      	ldr	r0, [pc, #16]	; (8006fa0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f8e:	f7ff fddd 	bl	8006b4c <USBD_GetString>
  return USBD_StrDesc;
 8006f92:	4b02      	ldr	r3, [pc, #8]	; (8006f9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	20001444 	.word	0x20001444
 8006fa0:	080077f4 	.word	0x080077f4

08006fa4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	6039      	str	r1, [r7, #0]
 8006fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	221a      	movs	r2, #26
 8006fb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fb6:	f000 f843 	bl	8007040 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fba:	4b02      	ldr	r3, [pc, #8]	; (8006fc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	200000e0 	.word	0x200000e0

08006fc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	6039      	str	r1, [r7, #0]
 8006fd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d105      	bne.n	8006fe6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	4907      	ldr	r1, [pc, #28]	; (8006ffc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fde:	4808      	ldr	r0, [pc, #32]	; (8007000 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fe0:	f7ff fdb4 	bl	8006b4c <USBD_GetString>
 8006fe4:	e004      	b.n	8006ff0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	4904      	ldr	r1, [pc, #16]	; (8006ffc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fea:	4805      	ldr	r0, [pc, #20]	; (8007000 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fec:	f7ff fdae 	bl	8006b4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ff0:	4b02      	ldr	r3, [pc, #8]	; (8006ffc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20001444 	.word	0x20001444
 8007000:	08007808 	.word	0x08007808

08007004 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	4603      	mov	r3, r0
 800700c:	6039      	str	r1, [r7, #0]
 800700e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007010:	79fb      	ldrb	r3, [r7, #7]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d105      	bne.n	8007022 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	4907      	ldr	r1, [pc, #28]	; (8007038 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800701a:	4808      	ldr	r0, [pc, #32]	; (800703c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800701c:	f7ff fd96 	bl	8006b4c <USBD_GetString>
 8007020:	e004      	b.n	800702c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	4904      	ldr	r1, [pc, #16]	; (8007038 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007026:	4805      	ldr	r0, [pc, #20]	; (800703c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007028:	f7ff fd90 	bl	8006b4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800702c:	4b02      	ldr	r3, [pc, #8]	; (8007038 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800702e:	4618      	mov	r0, r3
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20001444 	.word	0x20001444
 800703c:	08007814 	.word	0x08007814

08007040 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007046:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <Get_SerialNum+0x44>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800704c:	4b0e      	ldr	r3, [pc, #56]	; (8007088 <Get_SerialNum+0x48>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007052:	4b0e      	ldr	r3, [pc, #56]	; (800708c <Get_SerialNum+0x4c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4413      	add	r3, r2
 800705e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d009      	beq.n	800707a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007066:	2208      	movs	r2, #8
 8007068:	4909      	ldr	r1, [pc, #36]	; (8007090 <Get_SerialNum+0x50>)
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 f814 	bl	8007098 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007070:	2204      	movs	r2, #4
 8007072:	4908      	ldr	r1, [pc, #32]	; (8007094 <Get_SerialNum+0x54>)
 8007074:	68b8      	ldr	r0, [r7, #8]
 8007076:	f000 f80f 	bl	8007098 <IntToUnicode>
  }
}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	1fff7a10 	.word	0x1fff7a10
 8007088:	1fff7a14 	.word	0x1fff7a14
 800708c:	1fff7a18 	.word	0x1fff7a18
 8007090:	200000e2 	.word	0x200000e2
 8007094:	200000f2 	.word	0x200000f2

08007098 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	4613      	mov	r3, r2
 80070a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070a6:	2300      	movs	r3, #0
 80070a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070aa:	2300      	movs	r3, #0
 80070ac:	75fb      	strb	r3, [r7, #23]
 80070ae:	e027      	b.n	8007100 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	0f1b      	lsrs	r3, r3, #28
 80070b4:	2b09      	cmp	r3, #9
 80070b6:	d80b      	bhi.n	80070d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	0f1b      	lsrs	r3, r3, #28
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	4619      	mov	r1, r3
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	440b      	add	r3, r1
 80070c8:	3230      	adds	r2, #48	; 0x30
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	e00a      	b.n	80070e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	0f1b      	lsrs	r3, r3, #28
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	4619      	mov	r1, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	440b      	add	r3, r1
 80070e0:	3237      	adds	r2, #55	; 0x37
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	3301      	adds	r3, #1
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	4413      	add	r3, r2
 80070f6:	2200      	movs	r2, #0
 80070f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	3301      	adds	r3, #1
 80070fe:	75fb      	strb	r3, [r7, #23]
 8007100:	7dfa      	ldrb	r2, [r7, #23]
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	429a      	cmp	r2, r3
 8007106:	d3d3      	bcc.n	80070b0 <IntToUnicode+0x18>
  }
}
 8007108:	bf00      	nop
 800710a:	bf00      	nop
 800710c:	371c      	adds	r7, #28
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
	...

08007118 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	; 0x28
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007120:	f107 0314 	add.w	r3, r7, #20
 8007124:	2200      	movs	r2, #0
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	605a      	str	r2, [r3, #4]
 800712a:	609a      	str	r2, [r3, #8]
 800712c:	60da      	str	r2, [r3, #12]
 800712e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007138:	d13a      	bne.n	80071b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800713a:	2300      	movs	r3, #0
 800713c:	613b      	str	r3, [r7, #16]
 800713e:	4b1e      	ldr	r3, [pc, #120]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	4a1d      	ldr	r2, [pc, #116]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 8007144:	f043 0301 	orr.w	r3, r3, #1
 8007148:	6313      	str	r3, [r2, #48]	; 0x30
 800714a:	4b1b      	ldr	r3, [pc, #108]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	613b      	str	r3, [r7, #16]
 8007154:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007156:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800715a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800715c:	2302      	movs	r3, #2
 800715e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007160:	2300      	movs	r3, #0
 8007162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007164:	2303      	movs	r3, #3
 8007166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007168:	230a      	movs	r3, #10
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800716c:	f107 0314 	add.w	r3, r7, #20
 8007170:	4619      	mov	r1, r3
 8007172:	4812      	ldr	r0, [pc, #72]	; (80071bc <HAL_PCD_MspInit+0xa4>)
 8007174:	f7f9 fdfe 	bl	8000d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007178:	4b0f      	ldr	r3, [pc, #60]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 800717a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717c:	4a0e      	ldr	r2, [pc, #56]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 800717e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007182:	6353      	str	r3, [r2, #52]	; 0x34
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 800718a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718c:	4a0a      	ldr	r2, [pc, #40]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 800718e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007192:	6453      	str	r3, [r2, #68]	; 0x44
 8007194:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 8007196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071a0:	2200      	movs	r2, #0
 80071a2:	2100      	movs	r1, #0
 80071a4:	2043      	movs	r0, #67	; 0x43
 80071a6:	f7f9 fdae 	bl	8000d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80071aa:	2043      	movs	r0, #67	; 0x43
 80071ac:	f7f9 fdc7 	bl	8000d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80071b0:	bf00      	nop
 80071b2:	3728      	adds	r7, #40	; 0x28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40023800 	.word	0x40023800
 80071bc:	40020000 	.word	0x40020000

080071c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071d4:	4619      	mov	r1, r3
 80071d6:	4610      	mov	r0, r2
 80071d8:	f7fe fb59 	bl	800588e <USBD_LL_SetupStage>
}
 80071dc:	bf00      	nop
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80071f6:	78fa      	ldrb	r2, [r7, #3]
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	78fb      	ldrb	r3, [r7, #3]
 800720c:	4619      	mov	r1, r3
 800720e:	f7fe fb93 	bl	8005938 <USBD_LL_DataOutStage>
}
 8007212:	bf00      	nop
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800722c:	78fa      	ldrb	r2, [r7, #3]
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	4613      	mov	r3, r2
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	4413      	add	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	440b      	add	r3, r1
 800723a:	334c      	adds	r3, #76	; 0x4c
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	78fb      	ldrb	r3, [r7, #3]
 8007240:	4619      	mov	r1, r3
 8007242:	f7fe fc2c 	bl	8005a9e <USBD_LL_DataInStage>
}
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe fd60 	bl	8005d22 <USBD_LL_SOF>
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007272:	2301      	movs	r3, #1
 8007274:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d102      	bne.n	8007284 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
 8007282:	e008      	b.n	8007296 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	2b02      	cmp	r3, #2
 800728a:	d102      	bne.n	8007292 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800728c:	2301      	movs	r3, #1
 800728e:	73fb      	strb	r3, [r7, #15]
 8007290:	e001      	b.n	8007296 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007292:	f7f9 fad9 	bl	8000848 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800729c:	7bfa      	ldrb	r2, [r7, #15]
 800729e:	4611      	mov	r1, r2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe fd00 	bl	8005ca6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe fca8 	bl	8005c02 <USBD_LL_Reset>
}
 80072b2:	bf00      	nop
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe fcfb 	bl	8005cc6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072e2:	f043 0301 	orr.w	r3, r3, #1
 80072e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <HAL_PCD_SuspendCallback+0x48>)
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	4a03      	ldr	r2, [pc, #12]	; (8007304 <HAL_PCD_SuspendCallback+0x48>)
 80072f6:	f043 0306 	orr.w	r3, r3, #6
 80072fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	e000ed00 	.word	0xe000ed00

08007308 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe fceb 	bl	8005cf2 <USBD_LL_Resume>
}
 800731c:	bf00      	nop
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	4611      	mov	r1, r2
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe fd43 	bl	8005dc6 <USBD_LL_IsoOUTIncomplete>
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800735a:	78fa      	ldrb	r2, [r7, #3]
 800735c:	4611      	mov	r1, r2
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe fcff 	bl	8005d62 <USBD_LL_IsoINIncomplete>
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fd55 	bl	8005e2a <USBD_LL_DevConnected>
}
 8007380:	bf00      	nop
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe fd52 	bl	8005e40 <USBD_LL_DevDisconnected>
}
 800739c:	bf00      	nop
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d13c      	bne.n	800742e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80073b4:	4a20      	ldr	r2, [pc, #128]	; (8007438 <USBD_LL_Init+0x94>)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a1e      	ldr	r2, [pc, #120]	; (8007438 <USBD_LL_Init+0x94>)
 80073c0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80073c4:	4b1c      	ldr	r3, [pc, #112]	; (8007438 <USBD_LL_Init+0x94>)
 80073c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80073ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80073cc:	4b1a      	ldr	r3, [pc, #104]	; (8007438 <USBD_LL_Init+0x94>)
 80073ce:	2204      	movs	r2, #4
 80073d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80073d2:	4b19      	ldr	r3, [pc, #100]	; (8007438 <USBD_LL_Init+0x94>)
 80073d4:	2202      	movs	r2, #2
 80073d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80073d8:	4b17      	ldr	r3, [pc, #92]	; (8007438 <USBD_LL_Init+0x94>)
 80073da:	2200      	movs	r2, #0
 80073dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80073de:	4b16      	ldr	r3, [pc, #88]	; (8007438 <USBD_LL_Init+0x94>)
 80073e0:	2202      	movs	r2, #2
 80073e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80073e4:	4b14      	ldr	r3, [pc, #80]	; (8007438 <USBD_LL_Init+0x94>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80073ea:	4b13      	ldr	r3, [pc, #76]	; (8007438 <USBD_LL_Init+0x94>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80073f0:	4b11      	ldr	r3, [pc, #68]	; (8007438 <USBD_LL_Init+0x94>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80073f6:	4b10      	ldr	r3, [pc, #64]	; (8007438 <USBD_LL_Init+0x94>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80073fc:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <USBD_LL_Init+0x94>)
 80073fe:	2200      	movs	r2, #0
 8007400:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007402:	480d      	ldr	r0, [pc, #52]	; (8007438 <USBD_LL_Init+0x94>)
 8007404:	f7f9 fe94 	bl	8001130 <HAL_PCD_Init>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800740e:	f7f9 fa1b 	bl	8000848 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007412:	2180      	movs	r1, #128	; 0x80
 8007414:	4808      	ldr	r0, [pc, #32]	; (8007438 <USBD_LL_Init+0x94>)
 8007416:	f7fb f8ec 	bl	80025f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800741a:	2240      	movs	r2, #64	; 0x40
 800741c:	2100      	movs	r1, #0
 800741e:	4806      	ldr	r0, [pc, #24]	; (8007438 <USBD_LL_Init+0x94>)
 8007420:	f7fb f8a0 	bl	8002564 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007424:	2280      	movs	r2, #128	; 0x80
 8007426:	2101      	movs	r1, #1
 8007428:	4803      	ldr	r0, [pc, #12]	; (8007438 <USBD_LL_Init+0x94>)
 800742a:	f7fb f89b 	bl	8002564 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	20001644 	.word	0x20001644

0800743c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007452:	4618      	mov	r0, r3
 8007454:	f7f9 ff89 	bl	800136a <HAL_PCD_Start>
 8007458:	4603      	mov	r3, r0
 800745a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	4618      	mov	r0, r3
 8007460:	f000 f942 	bl	80076e8 <USBD_Get_USB_Status>
 8007464:	4603      	mov	r3, r0
 8007466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007468:	7bbb      	ldrb	r3, [r7, #14]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	4608      	mov	r0, r1
 800747c:	4611      	mov	r1, r2
 800747e:	461a      	mov	r2, r3
 8007480:	4603      	mov	r3, r0
 8007482:	70fb      	strb	r3, [r7, #3]
 8007484:	460b      	mov	r3, r1
 8007486:	70bb      	strb	r3, [r7, #2]
 8007488:	4613      	mov	r3, r2
 800748a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800749a:	78bb      	ldrb	r3, [r7, #2]
 800749c:	883a      	ldrh	r2, [r7, #0]
 800749e:	78f9      	ldrb	r1, [r7, #3]
 80074a0:	f7fa fc5a 	bl	8001d58 <HAL_PCD_EP_Open>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 f91c 	bl	80076e8 <USBD_Get_USB_Status>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	460b      	mov	r3, r1
 80074c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074d8:	78fa      	ldrb	r2, [r7, #3]
 80074da:	4611      	mov	r1, r2
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fa fca3 	bl	8001e28 <HAL_PCD_EP_Close>
 80074e2:	4603      	mov	r3, r0
 80074e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 f8fd 	bl	80076e8 <USBD_Get_USB_Status>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fa fd7b 	bl	8002016 <HAL_PCD_EP_SetStall>
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 f8de 	bl	80076e8 <USBD_Get_USB_Status>
 800752c:	4603      	mov	r3, r0
 800752e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007530:	7bbb      	ldrb	r3, [r7, #14]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007554:	78fa      	ldrb	r2, [r7, #3]
 8007556:	4611      	mov	r1, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f7fa fdc0 	bl	80020de <HAL_PCD_EP_ClrStall>
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	4618      	mov	r0, r3
 8007566:	f000 f8bf 	bl	80076e8 <USBD_Get_USB_Status>
 800756a:	4603      	mov	r3, r0
 800756c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800756e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800758a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800758c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007590:	2b00      	cmp	r3, #0
 8007592:	da0b      	bge.n	80075ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	4613      	mov	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	333e      	adds	r3, #62	; 0x3e
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	e00b      	b.n	80075c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	4613      	mov	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	440b      	add	r3, r1
 80075be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80075c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075ea:	78fa      	ldrb	r2, [r7, #3]
 80075ec:	4611      	mov	r1, r2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fa fb8d 	bl	8001d0e <HAL_PCD_SetAddress>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 f874 	bl	80076e8 <USBD_Get_USB_Status>
 8007600:	4603      	mov	r3, r0
 8007602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007604:	7bbb      	ldrb	r3, [r7, #14]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b086      	sub	sp, #24
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
 800761a:	460b      	mov	r3, r1
 800761c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800762c:	7af9      	ldrb	r1, [r7, #11]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	f7fa fca6 	bl	8001f82 <HAL_PCD_EP_Transmit>
 8007636:	4603      	mov	r3, r0
 8007638:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	4618      	mov	r0, r3
 800763e:	f000 f853 	bl	80076e8 <USBD_Get_USB_Status>
 8007642:	4603      	mov	r3, r0
 8007644:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007646:	7dbb      	ldrb	r3, [r7, #22]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	607a      	str	r2, [r7, #4]
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	460b      	mov	r3, r1
 800765e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800766e:	7af9      	ldrb	r1, [r7, #11]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	f7fa fc22 	bl	8001ebc <HAL_PCD_EP_Receive>
 8007678:	4603      	mov	r3, r0
 800767a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	4618      	mov	r0, r3
 8007680:	f000 f832 	bl	80076e8 <USBD_Get_USB_Status>
 8007684:	4603      	mov	r3, r0
 8007686:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007688:	7dbb      	ldrb	r3, [r7, #22]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	460b      	mov	r3, r1
 800769c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	4611      	mov	r1, r2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fa fc52 	bl	8001f52 <HAL_PCD_EP_GetRxCount>
 80076ae:	4603      	mov	r3, r0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80076c0:	4b03      	ldr	r3, [pc, #12]	; (80076d0 <USBD_static_malloc+0x18>)
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	20001b50 	.word	0x20001b50

080076d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]

}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076f6:	79fb      	ldrb	r3, [r7, #7]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d817      	bhi.n	800772c <USBD_Get_USB_Status+0x44>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <USBD_Get_USB_Status+0x1c>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	08007715 	.word	0x08007715
 8007708:	0800771b 	.word	0x0800771b
 800770c:	08007721 	.word	0x08007721
 8007710:	08007727 	.word	0x08007727
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	73fb      	strb	r3, [r7, #15]
    break;
 8007718:	e00b      	b.n	8007732 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800771a:	2303      	movs	r3, #3
 800771c:	73fb      	strb	r3, [r7, #15]
    break;
 800771e:	e008      	b.n	8007732 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007720:	2301      	movs	r3, #1
 8007722:	73fb      	strb	r3, [r7, #15]
    break;
 8007724:	e005      	b.n	8007732 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007726:	2303      	movs	r3, #3
 8007728:	73fb      	strb	r3, [r7, #15]
    break;
 800772a:	e002      	b.n	8007732 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800772c:	2303      	movs	r3, #3
 800772e:	73fb      	strb	r3, [r7, #15]
    break;
 8007730:	bf00      	nop
  }
  return usb_status;
 8007732:	7bfb      	ldrb	r3, [r7, #15]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <__libc_init_array>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	4d0d      	ldr	r5, [pc, #52]	; (8007778 <__libc_init_array+0x38>)
 8007744:	4c0d      	ldr	r4, [pc, #52]	; (800777c <__libc_init_array+0x3c>)
 8007746:	1b64      	subs	r4, r4, r5
 8007748:	10a4      	asrs	r4, r4, #2
 800774a:	2600      	movs	r6, #0
 800774c:	42a6      	cmp	r6, r4
 800774e:	d109      	bne.n	8007764 <__libc_init_array+0x24>
 8007750:	4d0b      	ldr	r5, [pc, #44]	; (8007780 <__libc_init_array+0x40>)
 8007752:	4c0c      	ldr	r4, [pc, #48]	; (8007784 <__libc_init_array+0x44>)
 8007754:	f000 f820 	bl	8007798 <_init>
 8007758:	1b64      	subs	r4, r4, r5
 800775a:	10a4      	asrs	r4, r4, #2
 800775c:	2600      	movs	r6, #0
 800775e:	42a6      	cmp	r6, r4
 8007760:	d105      	bne.n	800776e <__libc_init_array+0x2e>
 8007762:	bd70      	pop	{r4, r5, r6, pc}
 8007764:	f855 3b04 	ldr.w	r3, [r5], #4
 8007768:	4798      	blx	r3
 800776a:	3601      	adds	r6, #1
 800776c:	e7ee      	b.n	800774c <__libc_init_array+0xc>
 800776e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007772:	4798      	blx	r3
 8007774:	3601      	adds	r6, #1
 8007776:	e7f2      	b.n	800775e <__libc_init_array+0x1e>
 8007778:	08007844 	.word	0x08007844
 800777c:	08007844 	.word	0x08007844
 8007780:	08007844 	.word	0x08007844
 8007784:	08007848 	.word	0x08007848

08007788 <memset>:
 8007788:	4402      	add	r2, r0
 800778a:	4603      	mov	r3, r0
 800778c:	4293      	cmp	r3, r2
 800778e:	d100      	bne.n	8007792 <memset+0xa>
 8007790:	4770      	bx	lr
 8007792:	f803 1b01 	strb.w	r1, [r3], #1
 8007796:	e7f9      	b.n	800778c <memset+0x4>

08007798 <_init>:
 8007798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779a:	bf00      	nop
 800779c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779e:	bc08      	pop	{r3}
 80077a0:	469e      	mov	lr, r3
 80077a2:	4770      	bx	lr

080077a4 <_fini>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	bf00      	nop
 80077a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077aa:	bc08      	pop	{r3}
 80077ac:	469e      	mov	lr, r3
 80077ae:	4770      	bx	lr
